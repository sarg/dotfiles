#+OPTIONS: num:nil
#+SETUPFILE: ~/devel/ext/org-html-themes/org/theme-readtheorg-local.setup
#+PROPERTY: header-args :noweb-prefix no :noweb no-export :eval no
#+PROPERTY: header-args:elisp :tangle config.el
#+PROPERTY: header-args:scheme :tangle no :exports code
#+PROPERTY: header-args:cfg :tangle no :eval yes :cache yes :exports code :wrap "src text :noweb-ref guix-file"
#+begin_src elisp :exports none
;; -*- lexical-binding: t; -*-
;; generated from config.org
#+end_src
#+begin_src elisp :tangle packages.el :exports none
;; generated from config.org
#+end_src
* channels
** guix
#+begin_src scheme :noweb-ref guix-channel
(channel
 (name 'guix)
 (url "https://git.guix.gnu.org/guix.git")
 (branch "master")
 (introduction
  (make-channel-introduction
   "9edb3f66fd807b096b48283debdcddccfea34bad"
   (openpgp-fingerprint
    "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
#+end_src
** nonguix
#+begin_src scheme :noweb-ref guix-channel
(channel
 (name 'nonguix)
 (url "https://gitlab.com/nonguix/nonguix")
 (branch "master")
 (introduction
  (make-channel-introduction
   "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
   (openpgp-fingerprint
    "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
#+end_src
** sops
#+begin_src scheme :noweb-ref guix-channel
(channel
 (name 'sops-guix)
 (url "https://github.com/fishinthecalculator/sops-guix")
 (branch "main")
 (introduction
  (make-channel-introduction
   "0bbaf1fdd25266c7df790f65640aaa01e6d2dbc9"
   (openpgp-fingerprint
    "8D10 60B9 6BB8 292E 829B  7249 AED4 1CC1 93B7 01E2"))))
#+end_src
** personal
#+begin_src scheme :noweb-ref guix-channel
(channel
 (name 'personal)
 (url "https://github.com/sarg/dotfiles")
 (branch "master"))
#+end_src
* global vars
#+begin_src scheme :noweb-ref globals
'((name . "Sergey Trofimov")
  (email . "sarg@sarg.org.ru")
  (gpgKey . "3ADB423B40A20785"))
#+end_src
#+begin_src elisp
(defvar guix/globals <<globals>>)
#+end_src
* system.scm
** template
#+begin_src scheme :tangle ../../guix/system.scm
(use-modules (gnu)
             (gnu artwork)
             (gnu services)
             (gnu bootloader grub)
             (gnu system privilege)
             (gnu packages)
             (guix packages)
             (guix channels)
             (guix utils)
             (srfi srfi-1)
             (personal services utils)
             (nongnu system linux-initrd)
             (nongnu packages linux)
             (ice-9 receive)
             <<system-use>>)

(define (pkg x)
  (if (string? x)
      (receive (package out)
          (specification->package+output x)
        (if (string= "out" out) package
            (list package out)))
      x))

(define (auto-login-to-tty config tty user)
  (if (string=? tty (mingetty-configuration-tty config))
      (mingetty-configuration
       (inherit config)
       (auto-login user)
       (shepherd-requirement
        (cons 'dbus-system
              (mingetty-configuration-shepherd-requirement
               config))))
      config))

(operating-system
  (kernel linux)
  (kernel-arguments '("quiet" "loglevel=1"))
  (initrd microcode-initrd)
  (initrd-modules (cons "i915" %base-initrd-modules))
  (firmware (cons* iwlwifi-firmware broadcom-bt-firmware %base-firmware))
  (locale "en_GB.UTF-8")
  (timezone "Europe/Berlin")
  (host-name "thinkpad")
  (keyboard-layout (keyboard-layout "us"))
  (name-service-switch %mdns-host-lookup-nss)
  (bootloader
   (bootloader-configuration
    (theme (grub-theme
            (image (file-append %artwork-repository "/grub/guix-16-9.svg"))
            (resolution '(1600 . 900))
            (gfxmode '("1600x900" "auto"))))
    (bootloader grub-efi-bootloader)
    (targets '("/boot"))))

  (file-systems
   (cons* (file-system
            (mount-point "/")
            (device (file-system-label "Guix_image"))
            (type "ext4"))
          (file-system
            (mount-point "/boot")
            (device (file-system-label "GNU-ESP"))
            (type "vfat"))
          (file-system
            (mount-point "/media/500GB")
            (device (file-system-label "500GB"))
            (create-mount-point? #t)
            (mount-may-fail? #t)
            (type "ext4"))
          %base-file-systems))

  (users (cons* (user-account
                 (name "sarg")
                 (comment "Sergey Trofimov")
                 (group "users")
                 (home-directory "/home/sarg")
                 (supplementary-groups
                  '("wheel" "netdev" "audio" "video" "tty" "input" "cdrom" "dialout"
                    <<user-group>>)))
                %base-user-accounts))

  (packages
   (append
    (map pkg (list <<system-pkg>>))
    (filter (lambda (p)
              (not (member (package-name p)
                           '("wireless-tools" "info-reader" "nano" "mg" "isc-dhcp"))))
            %base-packages)))

  (privileged-programs
   (cons* <<privileged-program>> %default-privileged-programs))

  (services
   (cons*
    <<system-service>>
    (modify-services %base-services
      <<modify-system-service>>)))
#+end_src
** base
#+begin_src scheme :noweb-ref modify-system-service
(mingetty-service-type
 config =>
 (auto-login-to-tty config "tty1" "sarg"))

(guix-service-type
 config =>
 (guix-configuration
  (inherit config)
  ;; prevent guix gc deleting build inputs
  (privileged? #f)
  (substitute-urls (cons*
                    "https://substitutes.nonguix.org"
                    (guix-configuration-substitute-urls config)))
  (authorized-keys (cons*
                    <<cfg-nonguix-pub()>>
                    (guix-configuration-authorized-keys config)))
  (extra-options '("--gc-keep-derivations"
                   "--gc-keep-outputs")))))
#+end_src
** guix
#+name: cfg-nonguix-pub
#+begin_src cfg :wrap src text
(public-key (ecc (curve Ed25519) (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))
#+end_src

#+RESULTS[35fd241b186369c3c59217a2d5f79bd1c1406e61]: cfg-nonguix-pub
#+begin_src text
(mixed-text-file
  "cfg-file"
"(public-key (ecc (curve Ed25519) (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))")
#+end_src

** networking
#+begin_src scheme :noweb-ref system-use
(gnu services ssh)
(gnu packages cups)
(gnu services dns)
(gnu services networking)
(gnu services avahi)
#+end_src

#+name: cfg-resolv-conf
#+begin_src cfg :wrap src text
name_servers=127.0.1.1
resolv_conf_local_only=no
dnsmasq=true
dnsmasq_conf=/etc/dnsmasq.servers
dnsmasq_resolve=/etc/dnsmasq.resolve
#+end_src

#+RESULTS[59231caa410b09bcc087d62e50b22d12e254386d]: cfg-resolv-conf
#+begin_src text
(mixed-text-file
  "cfg-file"
"name_servers=127.0.1.1\n"
"resolv_conf_local_only=no\n"
"dnsmasq=true\n"
"dnsmasq_conf=/etc/dnsmasq.servers\n"
"dnsmasq_resolve=/etc/dnsmasq.resolve")
#+end_src

#+begin_src scheme :noweb-ref system-service
(service openssh-service-type
         (openssh-configuration
          (x11-forwarding? #t)))
(service dnsmasq-service-type
         (dnsmasq-configuration
          (no-hosts? #t)
          (servers-file "/etc/dnsmasq.servers")
          (listen-addresses '("::1" "127.0.1.1"))
          ;; (addresses '("/dev.local/127.0.0.1"
          ;;              "/local/127.0.0.1"))
          (negative-cache? #f)
          (servers '("9.9.9.9"))
          (extra-options '("--bind-interfaces"
                           "--interface=lo"))))
(simple-service
 'resolvconf etc-service-type
 (list `("resolvconf.conf" ,<<cfg-resolv-conf()>>)))

(service ntp-service-type)

(service iwd-service-type
         (iwd-configuration
          (shepherd-provision '(iwd networking wireless-daemon))
          (config
           (iwd-settings
            (general
             (iwd-general-settings
              (enable-network-configuration? #t)))
            (network
             (iwd-network-settings
              (name-resolving-service 'resolvconf)))))))
#+end_src
** vpn
#+begin_src scheme :noweb-ref system-use
(gnu services vpn)
#+end_src
#+begin_src scheme :noweb-ref system-service
(service wireguard-service-type
         (wireguard-configuration
          (auto-start? #f)
          (addresses '("10.66.66.2/32" "fd42:42:42::2/128"))
          (private-key (plain-file "private" (getenv "WG_CLIENT")))
          (peers
           (list
            (wireguard-peer
             (name "hetzner")
             (endpoint "vpn.sarg.org.ru:52817")
             (public-key "6gNRvmvi5oRGSPr8J0dBcyDyKS94zO4Y4Jbwo2u+iV0=")
             (preshared-key (plain-file "psk" (getenv "WG_PSK")))
             (allowed-ips '("0.0.0.0/0" "::/0")))))))
#+end_src
** hardware
#+begin_src scheme :noweb-ref cups/patched
(package/inherit cups
  (source
   (origin
     (inherit (package-source cups))
     (modules '((guix build utils)))
     (snippet '(begin
                   ;; Don't enforce root ownership check. Filters and other
                   ;; files might be owned by guix-daemon on rootless system.
                   (substitute* "cups/file.c"
                     (("if \\(fileinfo.st_uid") "if (0")))))))
#+end_src
#+begin_src scheme :noweb-ref system-use
(personal packages udev-rules)
(gnu services base)
(gnu services cups)
(gnu services pm)
#+end_src
#+begin_src scheme :noweb-ref system-pkg
"bluez" "intel-vaapi-driver" "tlp" "libratbag"
#+end_src
#+begin_src scheme :noweb-ref system-service
(service fstrim-service-type)
(service tlp-service-type
         (tlp-configuration
          (restore-device-state-on-startup? #t)))

(simple-service
 'setkeycodes activation-service-type
 #~(invoke (string-append #$(pkg "kbd") "/bin/setkeycodes")
           "1d" "56"                  ; lctrl->lalt
           "38" "29"                  ; lalt->lctrl
           "3a" "42"))      ; capslock->lshift

(udev-rules-service 'qmk (pkg "qmk-udev-rules"))
(udev-rules-service 'kindle kindle-usbnet-udev-rules)
(udev-rules-service 'pixel pixel-usbnet-udev-rules)
(udev-rules-service 'brightness (pkg "brightnessctl"))
(udev-rules-service 'restore-brightness backlight-udev-rules)
(udev-rules-service 'leds iwlwifi-led-udev-rules)
(simple-service 'ratbagd dbus-root-service-type (list (pkg "libratbag")))

(service cups-service-type
         (cups-configuration
          (cups <<cups/patched>>)
          (web-interface? #t)
          (extensions (list (pkg "cups-filters")))))
#+end_src
** desktop
#+begin_src scheme :noweb-ref system-use
(gnu services guix)
(gnu services desktop)
(gnu services linux)
(gnu services dbus)
#+end_src
#+begin_src scheme :noweb-ref system-service
;; Add polkit rules, so that non-root users in the wheel group can
;; perform administrative tasks (similar to "sudo").
(service polkit-service-type)
polkit-wheel-service
(simple-service 'polkit-wheel-policies polkit-service-type
                (list <<polkit-rule>>))

(service avahi-service-type)
(service dbus-root-service-type)
(service upower-service-type)
(service bluetooth-service-type)
(service udisks-service-type)
(service elogind-service-type
         (elogind-configuration
          (handle-lid-switch-external-power 'suspend)
          (kill-user-processes? #t)))
#+end_src
#+begin_src scheme :noweb-ref privileged-program
(privileged-program
 (program (file-append (pkg "xsecurelock") "/libexec/xsecurelock/authproto_pam"))
 (setuid? #t))
#+end_src
#+name: cfg-udisks-wheel
#+begin_src cfg :wrap src text
// Allow udisks2 to mount devices without authentication
// for users in the 'wheel' group.
polkit.addRule(function(action, subject) {
    if ((action.id == "org.freedesktop.udisks2.filesystem-mount-system" ||
         action.id == "org.freedesktop.udisks2.filesystem-mount") &&
        subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
#+end_src

#+RESULTS[6154ce7f960aa34daf1619b7186e33e88c2d3180]: cfg-udisks-wheel
#+begin_src text
(mixed-text-file
  "cfg-file"
"// Allow udisks2 to mount devices without authentication\n"
"// for users in the 'wheel' group.\n"
"polkit.addRule(function(action, subject) {\n"
"    if ((action.id == \"org.freedesktop.udisks2.filesystem-mount-system\" ||\n"
"         action.id == \"org.freedesktop.udisks2.filesystem-mount\") &&\n"
"        subject.isInGroup(\"wheel\")) {\n"
"        return polkit.Result.YES;\n"
"    }\n"
"});")
#+end_src

#+begin_src scheme :noweb-ref polkit-rule
(file-union
   "polkit-udisks-wheel"
   `(("share/polkit-1/rules.d/udisks-wheel.rules"
      ,<<cfg-udisks-wheel()>>)))
#+end_src
** COMMENT virtualization
#+begin_src scheme :noweb-ref system-use
(gnu services virtualization)
#+end_src
#+begin_src scheme :noweb-ref user-group
"kvm"
#+end_src
#+begin_src scheme :noweb-ref polkit-rule
(pkg "spice-gtk")
#+end_src
#+begin_src scheme :noweb-ref system-service
(service libvirt-service-type)
(service virtlog-service-type)
#+end_src
#+begin_src scheme :noweb-ref privileged-program
(privileged-program
 (program (file-append (pkg "spice-gtk") "/libexec/spice-client-glib-usb-acl-helper"))
 (setuid? #t))
#+end_src
** COMMENT docker
#+begin_src scheme :noweb-ref system-use
(gnu service containers)
(gnu system accounts)
#+end_src
#+begin_src scheme :noweb-ref user-group
"cgroup"
#+end_src
#+begin_src scheme :noweb-ref system-service
(service iptables-service-type)
(service rootless-podman-service-type
         (rootless-podman-configuration
          (subgids
           (list (subid-range (name "sarg"))))
          (subuids
           (list (subid-range (name "sarg"))))))
#+end_src
** various services
#+begin_src scheme :noweb-ref system-use
(gnu services admin)
(gnu services sysctl)
#+end_src

#+begin_src scheme :noweb-ref system-service
(service pam-limits-service-type
         ;; For Lutris / Wine esync
         (list (pam-limits-entry "*" 'hard 'nofile 524288)))

(simple-service 'sysctl-custom sysctl-service-type
                '(("fs.inotify.max_user_watches" . "524288")))

(service file-database-service-type
         (file-database-configuration
          (schedule #~(calendar-event #:hours '(6) #:minutes '(0)))
          (excluded-directories
           (append '("/home") %default-file-database-excluded-directories))))
#+end_src
* home.scm template
#+begin_src scheme :noweb-ref nil :tangle ../../guix/home.scm :exports none
;; generated from config.org
(use-modules
 (gnu)
 (gnu artwork)
 (guix)
 (guix gexp)
 (guix git-download)
 (guix build-system copy)
 (guix build utils)
 (guix utils)
 (guix modules)
 (guix channels)
 (gnu home)
 (gnu services)
 (gnu packages)
 (gnu packages admin)
 (gnu packages base)
 (gnu packages gnupg)
 (gnu packages qt)
 (gnu home services)
 (gnu home services syncthing)
 (gnu home services dotfiles)
 (gnu home services shepherd)
 (gnu home services gnupg)
 (gnu home services xdg)
 (gnu home services desktop)
 (gnu home services pm)
 (gnu home services sound)
 (gnu home services shells)
 (gnu home services ssh)
 (gnu home services mpv)
 (gnu home services guix)
 (gnu system shadow)
 (gnu services shepherd)
 (gnu services xorg)
 (personal services doomemacs)
 (personal services symlinks)
 (personal services owntracks)
 (personal services screen-locker)
 (personal services utils)
 (personal services supercron)
 (personal services secretsd)
 (personal services backup)
 (personal packages binary)
 (personal packages next)
 (ice-9 receive)
 (srfi srfi-1)
 (srfi srfi-11)
 (srfi srfi-26))

(define globals <<globals>>)
(define (global x) (assq-ref globals x))

(define (relative-file file)
  (string-append (current-source-directory) "/" file))
(define (pkg x)
  (if (string? x)
      (receive (package out)
          (specification->package+output x)
        (if (string= "out" out) package
            (list package out)))
      x))

(home-environment
 (services
  (cons*
   (simple-service
    'env-vars
    home-environment-variables-service-type
    `(<<guix-env-var>>))

   (simple-service
    'files home-files-service-type
    `((".guile" ,%default-dotguile)
      (".config/guix/channels.scm"
       ,(plain-file
         "channels.scm"
         (simple-format #f "~s" '(list <<guix-channel>>))))
      <<guix-file>>))
   <<guix-srv>>
   %base-home-services))

 (packages (map pkg (list <<guix-pkg>>))))
#+end_src
* apps
** android
#+begin_src scheme :noweb-ref guix-pkg
"adb" "socat" "scrcpy"
#+end_src
#+begin_src scheme :noweb-ref user-group
"adbusers"
#+end_src
#+begin_src scheme :noweb-ref system-service
(udev-rules-service 'android (pkg "android-udev-rules") #:groups '("adbusers"))
#+end_src
** utils
#+begin_src scheme :noweb-ref guix-pkg
"curl" "rsync" "man-db"
"atool" "p7zip" "unzip" "zip" "jq"
"ripgrep" "moreutils" "libiconv"
"powertop" "graphviz" "bind:utils"  ; dig
"graphicsmagick" "libwebp" "jpegoptim"
"iwgtk" "lshw" "strace" "nftables" "file" "lsof"
"pavucontrol"
#+end_src

** games
#+begin_src scheme :noweb-ref guix-pkg
;; "lierolibre" "chroma" "meandmyshadow" "gcompris-qt"
;; "tipp10" "quakespasm" "sgt-puzzles" "xonotic"
"quake3e"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".q3a" ,(symlink-to "/storage/apps/quake3"))
#+end_src
** media
#+begin_src scheme :noweb-ref guix-pkg
;; "zeal" "qalculate-gtk" "simplescreenrecorder"
"libreoffice" "qview" "stapler" "gimp"

;; "nomacs"
"tinymediamanager" "simple-scan-with-airscan"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".local/state/tinyMediaManager" ,(symlink-to "/storage/data/tinyMediaManager"))
#+end_src

** aria2
#+begin_src scheme :noweb-ref guix-pkg
"aria2"
#+end_src

#+begin_src cfg :dest ".config/aria2/aria2.conf"
seed-time=0
max-overall-upload-limit=1K
check-integrity=true
disable-ipv6=true
#+end_src

#+RESULTS[eaf79bcd625703fb55a5719f312342bec8984144]:
#+begin_src text :noweb-ref guix-file
(".config/aria2/aria2.conf"
,(mixed-text-file
  "cfg-file"
"seed-time=0\n"
"max-overall-upload-limit=1K\n"
"check-integrity=true\n"
"disable-ipv6=true"))
#+end_src

** mpv
#+begin_src scheme :noweb-ref guix-pkg
"emacs-mpv" "mpv" "yt-dlp"
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(service
 home-mpv-service-type
 (make-home-mpv-configuration
  #:global
  (make-mpv-profile-configuration
   #:audio-display 'no
   #:hwdec '("auto")
   #:fullscreen? #t
   #:sub-font-size 24
   #:x11-name "mpv"
   #:ytdl-format "best[height<=?900]"
   #:osd-fonts-dir (file-append (pkg "mpv-uosc") "/share/mpv/fonts")
   #:script-opts '(("network" . "yes")) ; thumbfast
   #:input-conf
   (plain-file "input.conf"
               (string-join
                '("q quit-watch-later"
                  "h seek -5" "l seek 5"
                  "H seek -60" "L seek 60")
                "\n"))
   #:scripts (list
              (file-append (pkg "mpv-mpris") "/lib/mpris.so")
              (file-append (pkg "mpv-thumbfast") "/share/mpv/scripts/thumbfast.lua")
              (file-append (pkg "mpv-uosc") "/share/mpv/scripts/uosc")))))
#+end_src
#+begin_src elisp :tangle packages.el
(package! mpv :built-in t)
#+end_src
#+begin_src elisp
(defun browse-url-mpv (url &rest _) (mpv-play-url url))
(add-to-list 'browse-url-handlers
             (cons (rx string-start "https://" (opt "www.") "youtu" (opt ".") "be")
                   #'browse-url-mpv))

(use-package! mpv
  :init
  :commands mpv-play-url
  :custom
  (mpv-default-options '("--force-window=immediate")))
#+end_src
** telega
#+begin_src scheme :noweb-ref guix-pkg
"emacs-telega" "emacs-telega-contrib"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".telega" ,(symlink-to "/storage/data/telega"))
#+end_src
#+begin_src elisp
(after! telega
  (add-to-list 'browse-url-handlers
               '("https://t.me/" . telega-browse-url)))
#+end_src
** exwm
EXWM has a separate [[../.doom.d/modules/app/exwm][doom app]]. Here are just the settings.
#+begin_src scheme :noweb-ref guix-pkg
"emacs-exwm"
"emacs-exwm-ss"
"emacs-ednc"
#+end_src
#+begin_src elisp
(defun exwm-autostart-apps ()
    (interactive)
    (cl-loop
     for cmd in (list
                 <<autostart>>
                 )
     do (start-process-shell-command "autostart" "*autostart*" cmd)))

(after! exwm
  <<exwm>>
  (add-hook! exwm-init #'exwm-autostart-apps))
#+end_src
*** notifications
#+begin_src elisp
(use-package! ednc
  :hook (exwm-init . ednc-mode)

  :config
  ; https://github.com/hiecaq/guix-config/blob/666d15b1f79b2b9171c430c24b877879ab61fd02/readme.org#desktop-notification-daemon
  (defvar my-ednc-posframe--buffer "*ednc-posframe*"
    "Buffer used for ednc notification posframe display.")

  (defun my-ednc-posframe-show ()
    (interactive)
    (when (and (buffer-live-p (get-buffer my-ednc-posframe--buffer))
               (posframe-workable-p))
      (posframe-show my-ednc-posframe--buffer
                     :poshandler #'posframe-poshandler-frame-top-right-corner
                     :border-width 1)))

  (defun my-ednc-posframe-hide ()
    (interactive)
    (when (posframe-workable-p)
      (posframe-hide my-ednc-posframe--buffer)))

  (defun my-ednc-posframe--update (&rest _)
    (let ((notifications (ednc-notifications)))
      (with-current-buffer (get-buffer-create my-ednc-posframe--buffer)
        (erase-buffer)
        (insert (mapconcat
                 (lambda (n) (ednc-format-notification n :expand))
                 notifications "")))
      (when (posframe-workable-p)
        (if notifications
            (my-ednc-posframe-show)
          (my-ednc-posframe-hide)))))

  (defun my-ednc--dismiss-first-notification ()
    (when-let* ((buffer (get-buffer my-ednc-posframe--buffer))
                (frame (with-current-buffer buffer
                         posframe--frame))
                ((frame-visible-p frame))
                (notification (ednc-notifications)))
      (ednc-dismiss-notification (car notification))))

  (advice-add #'keyboard-quit :before #'my-ednc--dismiss-first-notification)
  (add-hook 'ednc-notification-presentation-functions #'my-ednc-posframe--update))
#+end_src
*** bar
#+begin_src elisp
(setq!
 battery-mode-line-format " %b%>2p% "
 battery-mode-line-limit 50
 display-time-string-forms '((substring (format-time-string "%a") 0 2)
                              (format-time-string " %d %R")))

(display-battery-mode 1)
(display-time-mode 1)
(setq! global-mode-string
      '(emms-mode-line-string
        battery-mode-line-string
        display-time-string))
#+end_src
*** workspaces
#+begin_src elisp :noweb-ref exwm :tangle no
(tab-rename "code" 1)
(progn (tab-new) (tab-rename "brow" 2))
(tab-bar-mode 1)

(exwm/bind-command
 "<f13> 1" (lambda () (interactive) (tab-bar-switch-to-tab "code"))
 "<f13> 2" (lambda () (interactive) (tab-bar-switch-to-tab "brow")))

(custom-set-faces!
  '(tab-bar-tab :weight bold)
  '(tab-bar-tab-inactive :weight normal))

(setq!
 tab-bar-auto-width nil
 tab-bar-select-restore-windows nil
 tab-bar-new-tab-choice "*scratch*"
 tab-bar-format '(tab-bar-format-tabs
                  tab-bar-separator
                  tab-bar-format-align-right
                  tab-bar-format-global))
#+end_src
*** per-app settings
#+begin_src elisp :noweb-ref exwm :tangle no
(setopt exwm-manage-configurations
        `(((-any? (lambda (el) (equal exwm-class-name el))
            '("mpv" "scrcpy" "AusweisApp2" "iwgtk"))
           floating t
           floating-mode-line nil)
          ((equal exwm-class-name "Spotify")
           dont-steal-focus t)
          ((equal exwm-class-name "Pavucontrol")
           floating t
           floating-mode-line nil
           width 560
           height 400)))
#+end_src
*** bindings
**** simulation
When this key event occurs, replace it with another.
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-input-simulation-keys
      `((,(kbd "C-m") . return)
        (,(kbd "DEL") . backspace)

        ; key h in ru layout
        (,(kbd "C-р") . backspace)))
#+end_src
**** floating
As I've remapped =LWIN= to =F13=, I've lost the floating window resize/move bindings.
Let's restore them with =Ctrl= instead of =Super=.
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-input-resize-event 'C-down-mouse-3
      exwm-input-move-event 'C-down-mouse-1)
#+end_src
**** prefix
These are not full bindings, but the first keys in some sequence. Tell EXWM to
send these events to emacs.
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-input-prefix-keys
      `([f13]
        ?\C-w ?\C-x ?\M-x ?\M-m ?\C-g
        ?\C-m ?\C-h

        ;; cyrillic
        ?\C-р))
#+end_src
**** x11-only
These are bound only for X11 apps.
#+begin_src elisp :noweb-ref exwm :tangle no
(define-key! exwm-mode-map
  ;; consistent layout switch binding
  [?\C-\\] 'exwm-xkb-next-layout

  ;; this undoes exwm-input-prefix-keys for the next keypress
  [?\C-q] 'exwm-input-send-next-key

  ;; remove the default EXWM bindings
  [?\C-c] 'nil)
#+end_src
#+begin_src elisp :noweb-ref exwm :tangle no
(add-hook! 'exwm-input-input-mode-change-hook
  (defun exwm/enable-xkb-layout-switch ()
    (start-process "keymap.sh" nil "keymap.sh"
                   (if (eq exwm--input-mode 'char-mode) "enable" "disable"))))
#+end_src
**** global
#+begin_src elisp :noweb-ref exwm :tangle no
(defun exwm/switch-to-next-buffer (class &optional reverse?)
  "Form a cycle of CLASS buffers and return the one next to current buffer.
REVERSE? it when true. Returns the selected buffer."
  (cl-loop
    with first with this with next
    for b in (if reverse? (reverse (buffer-list)) (buffer-list))
    when (string= class (buffer-local-value 'exwm-class-name b)) do
      (setf first (or first b))
      (setf next (and this b))
      (setf this (or this (when (eq (current-buffer) b) b)))
    until next
    finally return
    (and (or next first)
         (switch-to-buffer (or next first) t t))))

(exwm/bind-command
 "<f13> r"     #'app-launcher-run-app

 "<f13> h"     #'evil-window-left
 "<f13> j"     #'evil-window-down
 "<f13> k"     #'evil-window-up
 "<f13> l"     #'evil-window-right

 "<f13> E"    `(lambda () (interactive)
                 (tab-switch "brow")
                 (cond
                  ((string= "qutebrowser" exwm-class-name)
                   (exwm/switch-to-next-buffer "qutebrowser" 'reverse))

                  ((not (get-process "qutebrowser"))
                   (start-process "qutebrowser" nil "setsid" "-w" "qutebrowser"))))

 "<f13> e"    `(lambda () (interactive)
                 (tab-switch "brow")
                 (or (exwm/switch-to-next-buffer "qutebrowser")
                     (start-process "qutebrowser" nil "setsid" "-w" "qutebrowser"))))
#+end_src
*** app launcher
#+begin_src text :noweb-ref emacs-dep
"dex"
#+end_src
#+begin_src elisp
;; the default one messes up exec path of wine programs due to wrong parsing
(after! app-launcher
  (defun app-launcher--action-dex (selected)
    (call-process (guix/pkg 'dex "/bin/dex") nil nil nil (alist-get 'file selected)))

  (defvar app-launcher-allow-list
    '("lutris" "libreoffice-startcenter" "flatseal" "spotify" "calibre-gui" "idea" "simple-scan"
      "iwgtk" "android")
    "Apps that are visible in the app-launcher")

  (defvar app-launcher-hide-list
    '("flatpak" "emacs" "qview" "scrcpy" "qutebrowser" "darkman"
      "libreoffice" "mpv" "quake3" "flameshot" "calibre")
    "Apps to hide from the app-launcher")

  (defun app-launcher-filter (apps)
    (maphash (lambda (_ def)
               (let ((file (alist-get 'file def)))
                 (unless (or
                          (-any? (lambda (i) (s-contains? i file t)) app-launcher-allow-list)
                          (-none? (lambda (i) (s-contains? i file t)) app-launcher-hide-list))
                   (setf (alist-get 'visible def) nil))))
             apps)
    apps)

  (advice-add 'app-launcher-parse-files
              :filter-return #'app-launcher-filter)

  (defvar app-launcher--M-x-set '())
  (defun app-launcher-to-M-x ()
    (interactive)

    ; forget previously set functions
    (-each app-launcher--M-x-set #'fmakunbound)
    (setq app-launcher--M-x-set '())

    ; create new functions
    (maphash
     (lambda (name app)
       (when (cdr (assq 'visible app))
         (let ((app-symbol (intern (concat "app-" (s-dashed-words name)))))
           (push app-symbol app-launcher--M-x-set)
           (fset app-symbol
                 (lambda ()
                   (interactive)
                   (funcall app-launcher-action-function app)))
           (put app-symbol 'function-documentation (cdr (assq 'comment app))))))
     (app-launcher-list-apps)))

  (app-launcher-to-M-x)
  (setq app-launcher--action-function #'app-launcher--action-dex))
#+end_src
*** TODO fix waiting for upstream
#+begin_src elisp :noweb-ref exwm :tangle no
; https://github.com/emacs-exwm/exwm/pull/85
(defun sarg/exwm--on-net-active-window (id _data)
  "Handle _NET_ACTIVE_WINDOW message with ID."
  (let ((buffer (exwm--id->buffer id))
        window)
    (if (buffer-live-p buffer)
        ;; Either an `exwm-mode' buffer (an X window) or a floating frame.
        (with-current-buffer buffer
          (when (and (eq exwm--frame exwm-workspace--current)
                     (not (plist-get exwm--configurations 'dont-steal-focus)))
            (if exwm--floating-frame
                (select-frame exwm--floating-frame)
              (setq window (get-buffer-window nil t))
              (unless window
                ;; State change: iconic => normal.
                (setq window (frame-selected-window exwm--frame))
                (set-window-buffer window (current-buffer)))
              ;; Focus transfer.
              (select-window window))))
      ;; A workspace.
      (dolist (f exwm-workspace--list)
        (when (eq id (frame-parameter f 'exwm-outer-id))
          (x-focus-frame f t))))))

(advice-add 'exwm--on-net-active-window :override #'sarg/exwm--on-net-active-window)
#+end_src
** elfeed
#+begin_src scheme :noweb-ref guix-pkg
"emacs-elfeed-org"
#+end_src
#+begin_src elisp :tangle packages.el
(package! elfeed-org :built-in t)
#+end_src
#+begin_src elisp
(defun elfeed-open-special ()
  "Open videos directly."
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (if (seq-contains-p (elfeed-entry-tags entry) 'youtube)
        (elfeed-search-browse-url)
      (elfeed-search-show-entry entry))))

(after! elfeed
  (setq elfeed-db-directory "/storage/data/elfeed")

  (setq elfeed-search-filter "@2-week-ago +unread -youtube"
        elfeed-show-entry-switch #'display-buffer)

  (evil-define-key 'normal elfeed-search-mode-map
    (kbd "RET") #'elfeed-open-special
    "q" #'elfeed-search-quit-window))
#+end_src

** emms
*** package
#+begin_src elisp
(defun dont-kill-buffer--hook ()
  (bury-buffer)
  (user-error "Don' kill me."))

(define-minor-mode dont-kill-buffer-mode
  "Don't kill buffer, just bury it."
  :global nil

  (if dont-kill-buffer-mode
      (add-hook 'kill-buffer-hook #'dont-kill-buffer--hook 0 t)
    (remove-hook 'kill-buffer-hook #'dont-kill-buffer--hook t)))

(defun =emms ()
  (interactive)
  (require 'emms)
  (cl-letf (((symbol-function 'switch-to-buffer) #'display-buffer))
    (if (or (null emms-playlist-buffer)
            (not (buffer-live-p emms-playlist-buffer)))
        (call-interactively 'emms-add-playlist))
    (emms)))

(after! emms
  (setq!
   emms-player-mpv-update-metadata t
   emms-player-mpv-parameters
   '("--quiet" "--really-quiet" "--no-audio-display" "--load-scripts=no")
   emms-playlist-buffer-name "*Music*"
   emms-source-file-default-directory (expand-file-name "~/Sync/"))

  (map! :map emms-playlist-mode-map
        :localleader
        "r" #'emms-toggle-random-playlist)

  (when (modulep! :app emms +history)
    (add-hook! emms-playlist-mode #'dont-kill-buffer-mode)
    (setq emms-history-file "/storage/data/emacs/emms_history")
    (emms-history-load))

  (setq emms-player-list (list emms-player-mpv)))
#+end_src
*** buffer and modeline
#+begin_src elisp
(after! emms
  (defun emms/modeline-status-icon ()
    (let ((clickable
           (lambda (text action)
             (propertize text 'keymap (make-mode-line-mouse-map 'mouse-1 action)))))
      (apply clickable
             (cond
              ((and emms-player-playing-p emms-player-paused-p)
               (list "" #'emms-pause))
              ((and emms-player-playing-p (emms-player-get 'emms-player-spotify 'ad-blocked))
               (list "" #'ignore))
              (emms-player-playing-p
               (list "" #'emms-pause))
              (t (list "" #'ignore))))))

  (defun emms/modeline-function ()
    (concat (emms/modeline-status-icon)
            (emms-mode-line-playlist-current)))

  (setq! emms-mode-line-mode-line-function #'emms/modeline-function)

  (set-popup-rule!
    (lambda (buffer action)
      (buffer-local-value 'emms-playlist-buffer-p (get-buffer buffer)))
    :ttl nil
    :quit 'current
    :select t
    :modeline '(" "
                (:eval (when emms-random-playlist " "))
                emms-mode-line-string
                emms-playing-time-string)
    :height 15)

  (add-hook 'emms-player-paused-hook #'emms-mode-line-alter)

  ;; don't show mode-line globally, to be shown only in the popup buffer
  (emms-mode-line-mode 1)
  (setq emms-mode-line-mode-line-function #'emms-mode-line-playlist-current)
  (delq 'emms-mode-line-string global-mode-string)
  (delq 'emms-playing-time-string global-mode-string))
#+end_src
*** bindings
#+begin_src elisp :noweb-ref exwm :tangle no
(exwm/bind-command
 "<XF86AudioRaiseVolume>" #'emms-volume-raise
 "<XF86AudioLowerVolume>" #'emms-volume-lower
 "<XF86AudioMute>" "pactl set-sink-mute @DEFAULT_SINK@ toggle"
 "<XF86AudioMicMute>" "pactl set-source-mute @DEFAULT_SOURCE@ toggle")

(after! emms
  (exwm/bind-command
   "<XF86AudioPlay>" #'emms-pause
   "<XF86AudioPrev>" #'emms-previous
   "<XF86AudioNext>" (lambda () (interactive) (if emms-random-playlist (emms-random) (emms-next)))))
#+end_src
*** spotify
**** player
#+begin_src elisp :tangle packages.el
(package! emms-player-spotify
  :recipe (:host github :repo "sarg/emms-spotify" :files (:defaults "contrib"))
  :pin "ca80431b00738e6130b924c64dc1f2cddadcc0b8")
#+end_src
#+begin_src elisp
(defun browse-url-emms (url &rest _) (emms-add-url url))
(add-to-list 'browse-url-handlers '("open.spotify.com" . browse-url-emms))

(use-package! emms-player-spotify
  :after emms
  :load-path
  (lambda ()
    (list (concat doom-local-dir "straight/build-" emacs-version "/emms-player-spotify/contrib")
          (concat doom-local-dir "straight/build-" emacs-version "/emms-player-spotify")))

  :custom
  (emms-player-spotify-launch-cmd "flatpak run com.spotify.Client")
  (emms-player-spotify-adblock t)

  :config
  (setq emms-player-spotify-debug t)
  (add-to-list 'emms-player-list emms-player-spotify))
#+end_src
**** search
#+begin_src elisp :tangle packages.el
(package! counsel-spotify :pin "2743ad52a9def53534fd505397fbe1ac49e53015")
#+end_src
#+begin_src elisp
(use-package! counsel-spotify
  :after-call counsel-spotify-search-album
  :custom
  (counsel-spotify-use-notifications nil) ; conflicts with handlers of emms-player-spotify

  :config
  (require 'emms)
  (require 'emms-player-spotify-counsel)
  (defun counsel-spotify-verify-credentials ()
    (unless (auth-source-pass-get "client-id" "Sites/spotify.com")
      (error "Spotify pass not available")))

  (defun counsel-spotify-basic-auth-credentials ()
    (concat "Basic " (base64-encode-string
                      (concat
                       (auth-source-pass-get "client-id" "Sites/spotify.com")
                       ":"
                       (auth-source-pass-get "client-secret" "Sites/spotify.com"))
                      t))))
#+end_src
*** ytdlp
#+begin_src elisp
(defun emms-add-ytdlp-playlist (url)
  "Fetch playlist at URL with yt-dlp and add individual tracks to current emms playlist."
  (interactive "sURL: \n")
  (let* ((command (concat "yt-dlp -q --flat-playlist --no-download --dump-single-json " url))
         (json-string (shell-command-to-string command))
         (json-data (json-read-from-string json-string))
         (entries (alist-get 'entries json-data)))

    (seq-do
     (-compose #'emms-add-url (-partial 'alist-get 'url))
     entries)))
#+end_src
** dict
[[https://github.com/BoboTiG/ebook-reader-dict][Wiktionary exports]]
#+begin_src scheme :noweb-ref guix-pkg
"emacs-lexic" "sdcv" "emacs-google-translate"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".local/share/stardict" ,(symlink-to "/storage/data/stardict"))
#+end_src
#+begin_src elisp :tangle packages.el
(package! lexic :built-in t)
(package! dictcc :pin "30b505759e5a97c2aaa8b0e8ea5e187fdf625c65")
(package! powerthesaurus :pin "4b97797cf789aaba411c61a85fe23474ebc5bedc")
#+end_src
#+begin_src elisp
(defun lexic-format-shr (entry &optional _expected-word)
  (with-temp-buffer
    (insert (plist-get entry :info))
    (cl-letf* ((tree (libxml-parse-html-region))
               (dict (plist-get entry :dict))
               (orig (symbol-function 'shr-urlify))
               ((symbol-function 'shr-urlify)
                (lambda (start url &optional title)
                  (funcall orig start (concat url "?dict=" dict) title))))
      (erase-buffer)
      (shr-insert-document tree)
      (buffer-string))))

(use-package! lexic
  :commands lexic-search
  :config
  (set-lookup-handlers! 'lexic-mode
    :documentation #'lexic-search)
  (set-popup-rule!
    '(major-mode . lexic-mode)
    :ttl nil
    :side 'left
    :quit 'current
    :select t
    :width 60)

  (defun lexic-open-bword-link (link &rest _)
    (let* ((qmark (s-index-of "?dict=" link))
           (word (substring link 8 qmark))
           (dict (substring link (+ qmark 6))))
      (lexic-search word nil (list dict) 'interactive nil)))

  (add-to-list 'browse-url-handlers
               '("bword://" . lexic-open-bword-link))

  (map! :map lexic-mode-map
        :n
        "RET" #'lexic-search-word-at-point
        "," #'lexic-search-history-backwards
        "." #'lexic-search-history-forwards
        "a" #'outline-show-all
        "n" #'lexic-next-entry
        "p" #'lexic-previous-entry)

  (setq lexic-dictionary-specs
        '(("Wiktionary DE-DE" :short "Wiktionary" :formatter lexic-format-shr :priority 0)
          ("Duden - Das große Wörterbuch der deutschen Sprache"
           :short "Duden" :formatter lexic-format-shr :priority 1)
          ("Langenscheidt e-Grosswörterbuch Deutsch als Fremdsprache (Deu-Deu) (de-de)" :short "Langenscheidt" :formatter lexic-format-shr :priority 2))))
#+end_src
** email
*** oauth
#+begin_src scheme :noweb-ref guix-pkg
"oama"
#+end_src
#+begin_src cfg :dest ".config/oama/config.yaml"
encryption:
    tag: GPG
    contents: '0x🐜(global 'gpgKey)🐜'

services:
  google:
    client_id: '406964657835-aq8lmia8j95dhl1a2bvharmfk3t1hgqj.apps.googleusercontent.com'
    client_secret: 'kSmqreRr0qwBWJgbf5Y-PjSU' # thunderbird
#+end_src

#+RESULTS[421412015e7b603918e1a2d95a62262d4fa58caf]:
#+begin_src text :noweb-ref guix-file
(".config/oama/config.yaml"
,(mixed-text-file
  "cfg-file"
"encryption:\n"
"    tag: GPG\n"
"    contents: '0x"(global 'gpgKey)"'\n"
"\n"
"services:\n"
"  google:\n"
"    client_id: '406964657835-aq8lmia8j95dhl1a2bvharmfk3t1hgqj.apps.googleusercontent.com'\n"
"    client_secret: 'kSmqreRr0qwBWJgbf5Y-PjSU' # thunderbird"))
#+end_src

*** sending
#+begin_src scheme :noweb-ref guix-pkg
"msmtp"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".msmtprc" ,(local-file "../email/.msmtprc" "msmtprc"))
#+end_src
*** receiving
#+begin_src scheme :noweb-ref guix-pkg
"isync"
#+end_src
#+begin_src scheme :noweb-ref guix-env-var
("SASL_PATH" . ,(file-append (pkg "cyrus-sasl-xoauth2") "/lib/sasl2"))
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".mail" ,(symlink-to "/storage/data/mail"))
(".mbsyncrc" ,(local-file "../email/.mbsyncrc" "mbsyncrc"))
#+end_src
*** notification
#+begin_src scheme :noweb-ref guix-file
(".config/goimapnotify/goimapnotify.yaml"
 ,(local-file "../email/.config/goimapnotify/goimapnotify.yaml"))
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(simple-service
 'goimapnotify
 home-shepherd-service-type
 (list
  (shepherd-service
   (provision '(goimapnotify))
   (requirement '(x11-display gpg-agent))
   (modules `(((shepherd support) #:hide (mkdir-p)) ;for '%user-log-dir'
              ,@(@ (gnu services shepherd) %default-modules)))
   (auto-start? #f)
   (start #~(make-forkexec-constructor
             (list #$(file-append (@ (gnu packages mail) goimapnotify) "/bin/goimapnotify"))
             #:log-file (string-append %user-log-dir "/goimapnotify.log")))
   (stop #~(make-kill-destructor)))))
#+end_src
#+begin_src sh :noweb-ref autostart :tangle no
"herd start goimapnotify"
#+end_src
*** client
#+begin_src scheme :noweb-ref guix-pkg
"mu" "emacs-consult-mu"
#+end_src
#+begin_src elisp :tangle packages.el
(package! consult-mu :built-in t)
#+end_src
#+begin_src elisp
(use-package! consult-mu
  :after mu4e)
(use-package! consult-mu-contacts
  :after consult-mu)

(after! mu4e
  (defun mu4e~headers-quit-buffer ()
    "Quit the mu4e-headers buffer."
    (interactive)
    (mu4e-mark-handle-when-leaving)
    (quit-window t)
    ;; clear the decks before going to the main-view
    (mu4e--query-items-refresh 'reset-baseline))

  (map! :map mu4e-main-mode-map
        :n "q" #'bury-buffer
        :n "Q" #'mu4e-quit)
  (set-popup-rule! "^\\*mu4e-main\\*$" :ignore t)
  (set-popup-rule! "^\\*mu4e-headers\\*$" :ignore t)
  (setq mu4e-bookmarks '(("flag:unread and not maildir:/gmail/trash and not maildir:/gmail/sent" "unread" ?m))
        mu4e-modeline-support nil
        mu4e-sent-folder "/gmail/sent"
        mu4e-drafts-folder "/gmail/drafts"
        mu4e-trash-folder "/gmail/trash"
        mu4e-refile-folder "/gmail/all"
        +mu4e-compose-org-msg-toggle-next nil
        sendmail-program "msmtp"
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        send-mail-function #'sendmail-send-it
        message-send-mail-function #'message-send-mail-with-sendmail)

  (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . 8bit))

  (setq mu4e-contexts
        (mapcar (lambda (email)
                  (make-mu4e-context
                   :name email
                   :vars `((user-mail-address . ,email)
                           (smtpmail-smtp-user . ,email))
                   :match-func
                   `(lambda (msg)
                      (when msg
                        (string-prefix-p ,email
                                         (mu4e-contact-email
                                          (nth 0
                                               (mu4e-message-field msg :to)))
                                         t)))))
                '("sarg@sarg.org.ru" "de.strofimov@gmail.com"))))
#+end_src
* storage symlinks
#+begin_src scheme :noweb-ref guix-file
("Resources" ,(symlink-to "/storage/Resources"))
("devel" ,(symlink-to "/storage/devel"))
(".events" ,(symlink-to "/storage/data/events"))
#+end_src
* secrets
** sops
#+begin_src scheme :noweb-ref guix-pkg
"sops"
#+end_src
#+begin_src cfg :dest ".config/direnv/lib/sops.sh"
#!/usr/bin/env bash
use_sops() {
    local path=${1:-$PWD/secrets.yaml}
    shift

    read_vars() {
        SOPS="sops -d --output-type dotenv"
        if [[ $# -eq 0 ]]; then
            $SOPS "$path"
        else
            for x in "$@"; do
                $SOPS --extract "['$x']" "$path"
            done
        fi | direnv dotenv bash /dev/stdin
    }

    eval "$(read_vars "$@")"
    watch_file "$path"
}
#+end_src

#+RESULTS[559a8947ac750489bca3decb07c6a9b3e6d88fed]:
#+begin_src text :noweb-ref guix-file
(".config/direnv/lib/sops.sh"
,(mixed-text-file
  "cfg-file"
"#!/usr/bin/env bash\n"
"use_sops() {\n"
"    local path=${1:-$PWD/secrets.yaml}\n"
"    shift\n"
"\n"
"    read_vars() {\n"
"        SOPS=\"sops -d --output-type dotenv\"\n"
"        if [[ $# -eq 0 ]]; then\n"
"            $SOPS \"$path\"\n"
"        else\n"
"            for x in \"$@\"; do\n"
"                $SOPS --extract \"['$x']\" \"$path\"\n"
"            done\n"
"        fi | direnv dotenv bash /dev/stdin\n"
"    }\n"
"\n"
"    eval \"$(read_vars \"$@\")\"\n"
"    watch_file \"$path\"\n"
"}"))
#+end_src

#+begin_src scheme :noweb-ref guix-file
(".config/openstack/clouds.yaml" ,(symlink-to (relative-file "../secure/.config/openstack/clouds.yaml")))
#+end_src
** password-store
#+begin_src elisp :tangle packages.el :exports none
(package! password-generator :built-in t)
(package! password-store :built-in t)
(package! password-store-otp :built-in t)
#+end_src
#+begin_src scheme :noweb-ref guix-pkg
"password-store"
"pass-otp"
"emacs-password-generator"
"emacs-password-store"
"emacs-password-store-otp"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".password-store" ,(symlink-to "/storage/Sync/pass"))
#+end_src

#+begin_src elisp
(after! auth-source
  (setq auth-sources '(password-store)))

(after! embark
  (defun password-store-otp-token-copy-and-echo (entry)
    "Copy an OTP token from ENTRY to clipboard."
    (interactive (list (read-string "Password entry: ")))
    (require 'password-store-otp)
    (let ((token (password-store-otp-token entry)))
      (message "OTP %s: %s" entry token)
      (password-store-otp--safe-copy token)))

  (defvar-keymap embark-pass-actions
    :doc "Keymap for actions for pass entries."
    :parent embark-general-map
    "f" #'password-store-copy-field
    "b" #'password-store-url
    "o" #'password-store-otp-token-copy-and-echo
    "e" #'password-store-edit
    "g" #'password-store-generate
    "r" #'password-store-rename
    "d" #'password-store-remove)


  (add-to-list 'embark-keymap-alist '(pass . embark-pass-actions)))
#+end_src

#+begin_src elisp
(setq password-cache-expiry (* 60 15))

;; for magithub auth to work create pass entry user^magithub@api.github.com
(after! magit
    (setq! magit-process-find-password-functions '(magit-process-password-auth-source)))

(use-package! password-generator
  :after password-store

  :config
  (defadvice! +password-store-edit-locally (entry)
    :override #'password-store-edit
    (interactive (list (password-store--completing-read t)))
    (find-file (password-store--entry-to-file entry)))

  (defadvice! +password-store-generate-strong (entry &optional len)
    :override #'password-store-generate
    (interactive (list (password-store--completing-read)
                       (when current-prefix-arg
                         (abs (prefix-numeric-value current-prefix-arg)))))
    (let ((pass
           (password-generator-strong
            (or len password-store-password-length) t)))
      (password-store-insert entry pass))))
#+end_src

*** COMMENT qutebrowser integration
#+begin_src elisp
(defun qute/choose-pass (url)
   (completing-read "Pass: " (password-store-list) nil t url))
#+end_src
#+begin_src cfg :dest ".config/qutebrowser/password_fill_rc"
choose_entry() {
    MENU_COMMAND=( dmenu -p pass -c pass )
    choose_entry_menu || true
}
#+end_src

#+RESULTS[e409f22f891ed54a9116700ba9915ba7278ced92]:
#+begin_src text :noweb-ref guix-file
(".config/qutebrowser/password_fill_rc"
,(mixed-text-file
  "cfg-file"
"choose_entry() {\n"
"    MENU_COMMAND=( dmenu -p pass -c pass )\n"
"    choose_entry_menu || true\n"
"}"))
#+end_src

** gpg
#+begin_src scheme :noweb-ref guix-pkg
"emacs-pinentry" "gnupg"
#+end_src
#+begin_src scheme :noweb-ref guix-file
,@(resolve-relative-to "/storage/" '((".gnupg" "data/gnupg/")))
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(service secretsd-service-type
            "exec:ssh puxel -- ./unlock-keyring")
(service home-gpg-agent-service-type
 (home-gpg-agent-configuration
  (pinentry-program
   (file-append pinentry-emacs "/bin/pinentry-emacs"))
  (ssh-support? #t)
  (default-cache-ttl 86400)
  (max-cache-ttl 86400)
  (default-cache-ttl-ssh 86400)
  (max-cache-ttl-ssh 86400)
  (extra-content "disable-scdaemon")))
#+end_src
#+begin_src elisp :tangle packages.el
(package! pinentry :built-in t)
#+end_src
#+begin_src elisp
(use-package! pinentry
  :config
  (pinentry-start))
#+end_src
* x11
#+begin_src scheme :noweb-ref guix-pkg
"xset" "xclip"
"hicolor-icon-theme" "adwaita-icon-theme"
"greybird-gtk-theme"
"font-fira-code"
"font-google-noto-emoji" ; 💪🕹
"font-hack"
"font-terminus"
#+end_src
#+begin_src cfg :dest ".config/gtk-3.0/settings.ini"
[Settings]
gtk-theme-name="Greybird"
gtk-icon-theme-name="Adwaita"
gtk-font-name="Fira Code 12"
#+end_src

#+RESULTS[5890d8681422e44008e0252b5c4006e5d4ac9aa0]:
#+begin_src text :noweb-ref guix-file
(".config/gtk-3.0/settings.ini"
,(mixed-text-file
  "cfg-file"
"[Settings]\n"
"gtk-theme-name=\"Greybird\"\n"
"gtk-icon-theme-name=\"Adwaita\"\n"
"gtk-font-name=\"Fira Code 12\""))
#+end_src

#+begin_src scheme :noweb-ref guix-pkg
(package
  (name "keymap-helper")
  (version "0")
  (source (local-file "../xsession/.local/bin/keymap.sh" #:recursive? #t))
  (build-system copy-build-system)
  (arguments
    (list
     #:install-plan ''(("keymap.sh" "bin/"))
     #:phases
     #~(modify-phases %standard-phases
         (add-before 'install 'wrap
           (lambda _
             (substitute* "keymap.sh"
               (("/bin/sh" all)
                (string-append all "\nPATH="
                               #$(this-package-input "xkbcomp") "/bin:"
                               #$(this-package-input "xset") "/bin"))))))))
  (inputs (map pkg '("xkbcomp" "xset")))
  (description "keymap helper script")
  (home-page #f)
  (synopsis #f)
  (license #f))
#+end_src
#+begin_src scheme :noweb-ref guix-env-var
("_JAVA_AWT_WM_NONREPARENTING" . "1")
("QT_QPA_PLATFORMTHEME" . "gtk3")
#+end_src
#+begin_src cfg :dest ".xinitrc"
🐜(screen-locker (video-saver "/storage/data/splash.mp4"))🐜 &
keymap.sh
🐜(pkg "xhost")🐜/bin/xhost +si:localuser:$USER
dbus-update-activation-environment --verbose DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY

while true; do
  xset s activate # lock to show password screen
  emacs -mm -f exwm-wm-mode
done
#+end_src

#+RESULTS[8145119eef72a0583f5201eb9dd695c5ecff2538]:
#+begin_src text :noweb-ref guix-file
(".xinitrc"
,(mixed-text-file
  "cfg-file"
(screen-locker (video-saver "/storage/data/splash.mp4"))" &\n"
"keymap.sh\n"(pkg "xhost")"/bin/xhost +si:localuser:$USER\n"
"dbus-update-activation-environment --verbose DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY\n"
"\n"
"while true; do\n"
"  xset s activate # lock to show password screen\n"
"  emacs -mm -f exwm-wm-mode\n"
"done"))
#+end_src

#+begin_src scheme :noweb-ref guix-srv
(service home-x11-service-type)
(simple-service
 'startx
 home-shepherd-service-type
 (list
  (shepherd-service
   (provision '(xorg))
   (requirement '(dbus))
   (start #~(make-forkexec-constructor
             (list #$(xorg-start-command-xinit
                      (xorg-configuration
                       (server xorg-server-next)
                       (modules (list xf86-input-libinput-next)))))
             #:create-session? #f))
   (stop #~(make-kill-destructor)))))
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".icons/default"
    ,(file-append (pkg "bibata-cursor-theme") "/share/icons/Bibata-Modern-Ice"))
#+end_src
* ssh
#+begin_src scheme :noweb-ref guix-pkg
"openssh"
#+end_src
#+begin_src scheme :noweb-ref guix-file
(".ssh/puxel_rsa" ,(symlink-to (relative-file "../secure/.ssh/puxel_rsa")))
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(service
 home-openssh-service-type
 (home-openssh-configuration
  (hosts
   (list
    (openssh-host
     (name "kindle")
     (host-name "192.168.15.244")
     (user "root"))
    (openssh-host
     (name "puxel")
     (identity-file "~/.ssh/puxel_rsa")
     (extra-content "IdentitiesOnly yes")
     (port 8022))))))
#+end_src
* services
** profile
#+begin_src scheme :noweb-ref guix-srv
(simple-service
 'extra-profile home-shell-profile-service-type
 (list (plain-file "profile" "GUIX_PROFILE=~/.guix-profile\n. $GUIX_PROFILE/etc/profile")))
#+end_src
** shepherd
#+begin_src scheme :noweb-ref guix-srv
(service
 home-shepherd-service-type
 (home-shepherd-configuration
  (auto-start? #f)
  (daemonize? #f)))

(simple-service
 'home-shepherd home-shell-profile-service-type
 (list (mixed-text-file
        "home-shepherd"
        "[[ $(tty) == /dev/tty1 ]] && exec shepherd --silent")))
#+end_src
** minidlna
#+begin_src scheme :noweb-ref guix-srv
(simple-service
 'minidlna home-shepherd-service-type
 (list
  (let ((dirs '("V,Movies")))
    (shepherd-service
     (documentation "Run minidlnad")
     (provision '(minidlnad))
     (modules `(((shepherd support) #:hide (mkdir-p)) ;for '%user-log-dir'
                ,@%default-modules))
     (start #~(make-forkexec-constructor
               (list #$(file-append (pkg "readymedia") "/sbin/minidlnad")
                     "-S" "-P" (string-append (or (getenv "XDG_RUNTIME_DIR") "/tmp")
                                              "/minidlna.pid")
                     "-f" #$(mixed-text-file "minidlna.conf"
                                             (string-join (map (cut string-append "media_dir=" <>) dirs) "\n" 'suffix)
                                             "db_dir=.cache/minidlna/\n"
                                             "wide_links=yes"))
               #:log-file (string-append %user-log-dir "/minidlnad.log")))
     (stop #~(make-kill-destructor))))))
#+end_src
** changelogs
#+begin_src scheme :noweb-ref guix-srv
(let* ((git2rss (load "../git2rss/guix.scm"))
       (changelog-task
        (lambda (fn)
          #~(make <task>
              #:name #$(string-append "changelog-" (basename fn))
              #:schedule (list (make <interval>
                                 #:start (time "2025-01-01T06:00:00+0000")
                                 #:period (period "1d")))
              #:arguments '(#$(file-append git2rss "/bin/git2rss") #$fn)))))

  (simple-service 'changelog-jobs supercron-service-type
                  (list
                   (changelog-task "/storage/Resources/dashboard/guix.atom")
                   (changelog-task "/storage/Resources/dashboard/doomemacs.atom"))))
#+end_src
** backup
#+begin_src scheme :noweb-ref guix-srv
(service
 restic-backup-service-type
 (restic-backup-configuration
  (jobs
   (list
    (restic-backup-job
     (name "storage")
     (repository "/media/500GB/restic")
     (password-file "/media/500GB/restic/pass")
     (schedule #~(list #:start (time "2025-01-01T06:00:00+0000")
                       #:period (period "1d")))
     (files (list "/storage"))
     (extra-flags (list "--exclude-if-present=.borgbackupexclude"
                        "--exclude-file" (plain-file "excludes" "node_modules"))))))))
#+end_src
** syncthing
#+begin_src scheme :noweb-ref guix-file
("Sync" ,(symlink-to "/storage/Sync"))
,@(resolve-relative-to "/storage/" '((".local/state/syncthing" "data/syncthing/")))
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(service
 home-syncthing-service-type
 (let ((pixel (syncthing-device (id "Q4ZQAU5-ZBFVS3E-OULHHHM-3HOCUXT-TVV5UYL-XPZRRWH-EXYYJWG-WVAUAAS")))
       (thinkpad (syncthing-device (id "NYWEUMS-WOSRVEG-TD6CQZA-IHZ66GX-HZT2PJ2-IZ244FL-N3JC7DD-3DV57AG"))))

   (for-home (syncthing-configuration
              (config-file
               (syncthing-config-file
                (usage-reporting-accepted -1)
                (gui-enabled? #f)
                (folders (list (syncthing-folder
                                (label "Sync")
                                (path "~/Sync")
                                (devices (list pixel thinkpad)))))))))))
#+end_src
** owntracks
#+name: cfg-mosquitto
#+begin_src cfg :wrap src text
listener 1883
allow_anonymous true
#+end_src

#+RESULTS[a203e0ebc1ff8e5443a5e637d44f48429602775a]: cfg-mosquitto
#+begin_src text
(mixed-text-file
  "cfg-file"
"listener 1883\n"
"allow_anonymous true")
#+end_src

#+begin_src scheme :noweb-ref guix-srv
(service mosquitto-service-type <<cfg-mosquitto()>>)
(service owntracks-service-type
         (owntracks-service
          (config (owntracks-configuration
                   (storage-dir "/storage/data/owntracks")))))
#+end_src
** desktop
#+begin_src scheme :noweb-ref guix-srv
(service home-dbus-service-type)
(service home-batsignal-service-type)
(service home-pipewire-service-type)
#+end_src
* guix-emacs helper
#+begin_src elisp
(defun use-guix-package (pkg-name)
  (interactive "MPackage: ")

  (let* ((pkg-path
          (thread-last
            pkg-name
            (format "(guix-command-output %S %S)" "build")
            (guix-eval-read)
            (s-trim)))

         (lisp-dir (car (directory-files
                         (concat pkg-path "/share/emacs/site-lisp")
                         'full (rx (not ?.))))))

    (add-to-list 'load-path lisp-dir)
    (require (intern (substring pkg-name 6)))))

(defun guix-package-info-insert-emacs-install-button (id name)
  "Insert install button for ENTRY if it is an emacs package."
  (when-let* ((is-emacs (string-prefix-p "emacs-" name)))
    (bui-insert-action-button
     "Use"
     (lambda (btn)
       (let ((name (car (split-string (button-get btn 'package-name) "@"))))
         (message "Use %s" name)
         (use-guix-package name)))
     "Use it without installing"
     'package-name name)))

(after! guix-ui-package
  (add-to-list 'guix-package-info-button-functions
               'guix-package-info-insert-emacs-install-button
               'append))
#+end_src
* doom
** base packages
#+begin_src scheme :noweb-ref guix-pkg
"emacs-vterm"
"tree-sitter-typescript"
"tree-sitter-javascript"
"tree-sitter-json"
"tree-sitter-html"
"tree-sitter-go"
"tree-sitter-css"
"tree-sitter-bash"
"tree-sitter-python"
"tree-sitter-clojure"

; modules dependencies
"shfmt" "shellcheck" "fd" "editorconfig-core-c"
"gopls" "go"

; python
"python"
"python-isort"
"python-pyflakes"
"python-pytest"
"python-black"
"python-nose"

; dirvish
"ffmpegthumbnailer" "poppler" "mediainfo" "vips"
#+end_src
#+begin_src scheme :noweb-ref guix-env-var
("VISUAL" . "emacsclient")
("EDITOR" . "emacsclient")
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(service
 doomemacs-service-type
 (doomemacs-configuration
  (emacs (pkg "emacs-next"))
  (doomemacs (pkg "doomemacs"))
  (config (doomemacs-config
           #:src (local-file (relative-file "../emacs/.doom.d") "src"
                             #:recursive? #t
                             #:select? (git-predicate (relative-file "../emacs/.doom.d")))
           #:inputs (map pkg (list <<emacs-dep>>))))))
#+end_src
** init.el
#+begin_src elisp :tangle init.el
;; generated from config.org
(setq doom-leader-key "<f13>"
      doom-leader-alt-key "<f13>"
      custom-file "~/devel/dotfiles/emacs/.doom.d/custom.el")
(doom!
 :completion  corfu vertico ;(ivy +fuzzy +prescient +childframe)
 :ui          nav-flash (modeline +light) ophints (popup +defaults) ligatures treemacs doom-dashboard
 :editor      (evil +everywhere) fold lispy snippets (format +onsave) multiple-cursors word-wrap
 :emacs       (dired +dirvish +icons) electric vc ibuffer undo
 :term        eshell vterm
 :tools       editorconfig (eval +overlay) (lookup +docsets) magit pdf (pass +auth) make tree-sitter lsp direnv llm
 :checkers    syntax
 :lang        (clojure +tree-sitter) data emacs-lisp (javascript +tree-sitter +lsp) markdown
              (org +contacts +dragndrop +pandoc +present +hugo +roam2 +pretty) beancount (go +lsp +tree-sitter)
              (rest +jq) (sh +tree-sitter) plantuml (python +lsp +tree-sitter) (web +tree-sitter) yaml (json +tree-sitter)
 :app         calendar telega (rss +org) torrent irc exwm emms dash-menu
 :email       (mu4e +gmail +org)
 :config      (default +bindings +smartparens +gnupg))
#+end_src
** dashboard
#+begin_src text :noweb-ref emacs-dep
"guix-icons"
#+end_src
#+begin_src elisp
(setq fancy-splash-image
      (guix/pkg 'guix-icons "/share/icons/hicolor/scalable/apps/guix-icon.svg"))
(setq +doom-dashboard-functions
      '(doom-dashboard-widget-banner
        doom-dashboard-widget-shortmenu))
#+end_src
** modeline
#+begin_src elisp
(setq! +modeline-encoding nil
       +modeline-height 20)

(def-modeline! :main
  '(" " +modeline-buffer-identification) `(""))
(set-modeline! :main 'default)

(def-modeline! 'project
  `(" " (:eval (abbreviate-file-name default-directory))) '(""))
#+end_src
** override popup params
#+begin_src elisp
(setq +popup--display-buffer-alist
      (seq-remove
       (lambda (el) (and (stringp (car el)) (string= (car el) "^\\*info\\*$")))
       +popup--display-buffer-alist))

(set-popup-rule!
 "^\\*info\\*$"
 :slot 2 :vslot 2 :size 0.45 :select t :quit nil :ttl nil)
#+end_src
** completion
#+begin_src elisp
; have no use for vertico-next-group
(after! consult
  (define-key consult-async-map [remap vertico-insert] nil))
#+end_src
** theme
#+begin_src scheme :noweb-ref guix-pkg
"emacs-catppuccin-theme"
#+end_src
#+begin_src elisp :tangle packages.el :exports none
(package! greymatters-theme :pin "a7220a8c6cf18ccae2b76946b6f01188a7c9d5d1")
(package! catppuccin-theme :built-in t)
#+end_src

#+begin_src elisp
(use-package! greymatters-theme)
(use-package! catppuccin-theme)
(defvar doom-theme-dark 'catppuccin)
(setq doom-theme 'greymatters
      doom-font (font-spec :family "Hack" :size 18)
      doom-serif-font (font-spec :family "Hack")
      doom-symbol-font (font-spec :family "Hack"))
#+end_src

Note: use =consult-theme= to quickly preview themes.
[[*dark mode][see: dark mode]]
* flatpaks
#+begin_src scheme :noweb-ref guix-env-var
("XDG_DATA_DIRS" . "$XDG_DATA_DIRS:$HOME/.local/share/flatpak/exports/share")
#+end_src
#+begin_src scheme :noweb-ref guix-pkg
"flatpak" "xdg-desktop-portal-gtk"
#+end_src
#+NAME: flatpak-list
#+begin_src sh :tangle no :results output
flatpak list --app --columns=application | head -n -1
#+end_src

#+RESULTS: flatpak-list
#+begin_example
com.endlessnetwork.aqueducts
com.github.tchx84.Flatseal
com.google.AndroidStudio
com.jetbrains.IntelliJ-IDEA-Community
com.spotify.Client
de.blobbyvolley.BlobbyVolley2
io.sourceforge.zaz
net.lutris.Lutris
net.sourceforge.lgames.LBreakoutHD
org.mattdm.icebreaker
org.prismlauncher.PrismLauncher
org.regular_dev.biplanes_revival
org.sugarlabs.MakeThemFall
#+end_example

#+begin_src sh :tangle no :stdin flatpak-list
xargs flatpak install --or-update --noninteractive
#+end_src
* desktop
** desktop entries
#+begin_src scheme :noweb-ref guix-pkg
"jaro"
#+end_src
#+begin_src cfg :dest ".config/associations"
(bind
 #:pattern "^mailto:.*"
 #:program '(emacsclient --eval "(message-mailto \"%f\")"))

(bind
 #:pattern "^https://t.me/.*"
 #:program '(emacsclient --eval "(telega-browse-url \"%f\")"))

(bind
 #:pattern "^org-protocol:.*"
 #:program '(emacsclient %f))

(bind
 #:pattern '("(application|text)/(x-)?(pdf|postscript|ps|epub.*)" "image/(x-)?eps" "image/vnd.djvu")
 #:program '(zathura %f))

(bind
 #:pattern "^video/.*"
 #:program '(mpv %f))

(bind
 #:pattern "^https?://"
 #:program '(qutebrowser %f))

(bind
 #:pattern "^image/.*"
 #:program '(qview %f))
#+end_src

#+RESULTS[d8cd816a38eb7ea0ee8310a772e52d2c4b2c558d]:
#+begin_src text :noweb-ref guix-file
(".config/associations"
,(mixed-text-file
  "cfg-file"
"(bind\n"
" #:pattern \"^mailto:.*\"\n"
" #:program '(emacsclient --eval \"(message-mailto \\\"%f\\\")\"))\n"
"\n"
"(bind\n"
" #:pattern \"^https://t.me/.*\"\n"
" #:program '(emacsclient --eval \"(telega-browse-url \\\"%f\\\")\"))\n"
"\n"
"(bind\n"
" #:pattern \"^org-protocol:.*\"\n"
" #:program '(emacsclient %f))\n"
"\n"
"(bind\n"
" #:pattern '(\"(application|text)/(x-)?(pdf|postscript|ps|epub.*)\" \"image/(x-)?eps\" \"image/vnd.djvu\")\n"
" #:program '(zathura %f))\n"
"\n"
"(bind\n"
" #:pattern \"^video/.*\"\n"
" #:program '(mpv %f))\n"
"\n"
"(bind\n"
" #:pattern \"^https?://\"\n"
" #:program '(qutebrowser %f))\n"
"\n"
"(bind\n"
" #:pattern \"^image/.*\"\n"
" #:program '(qview %f))"))
#+end_src

** multimedia keys
#+begin_src text :noweb-ref guix-pkg
"flameshot" ; needs to be in the profile for dbus facility
"brightnessctl"
#+end_src
#+begin_src elisp :noweb-ref exwm :tangle no
(exwm/bind-command
   "<XF86Launch1>" #'dash-menu
   "<XF86Explorer>" #'dash-menu
   "<XF86MonBrightnessUp>" "brightnessctl -e set 10%+"
   "<XF86MonBrightnessDown>" "brightnessctl -e set 10%-"
   "<XF86ScreenSaver>" "xset s activate"
   "<f13> <f12>" "flameshot gui")
#+end_src
** dark mode
#+begin_src scheme :noweb-ref guix-pkg
"darkman"
#+end_src
#+begin_src elisp :tangle packages.el :exports none
(package! darkman :pin "beb2186e6eaf13ebe1ae56e460bcd1a4c0cb4f07")
#+end_src
#+begin_src cfg :dest ".config/darkman/config.yaml"
lat: 52.52
lng: 13.39
dbusserver: true
#+end_src

#+RESULTS[714f30d34b122acc2715a52b0a8481368d6d05ba]:
#+begin_src text :noweb-ref guix-file
(".config/darkman/config.yaml"
,(mixed-text-file
  "cfg-file"
"lat: 52.52\n"
"lng: 13.39\n"
"dbusserver: true"))
#+end_src

#+begin_src elisp
(use-package! darkman
  :custom
  (darkman-themes `(:light ,doom-theme
                    :dark ,doom-theme-dark))
  :config
  (defadvice load-theme (before no-theme-stacking activate)
    "Disable the previous theme before loading a new one."
    (mapc #'disable-theme custom-enabled-themes))

  (if (display-graphic-p)
      (add-hook! 'after-init-hook (darkman-mode))))
#+end_src
** redshift
#+begin_src scheme :noweb-ref guix-srv
(service
 home-redshift-service-type
 (home-redshift-configuration
  (location-provider 'manual)
  (latitude 52.52)
  (longitude 13.39)))
#+end_src
** bluetooth
#+begin_src scheme :noweb-ref guix-pkg
"emacs-bluetooth"
#+end_src
#+begin_src elisp :tangle packages.el
(package! bluetooth :built-in t)
#+end_src
#+begin_src elisp
(use-package! bluetooth)
#+end_src
** udisks
#+begin_src scheme :noweb-ref guix-pkg
"emacs-discomfort"
#+end_src
#+begin_src elisp :tangle packages.el
(package! discomfort :built-in t)
#+end_src
#+begin_src elisp
(use-package! discomfort
  :config
  (add-to-list 'evil-emacs-state-modes 'discomfort-mode)
  (define-key! discomfort-mode-map
    "j" #'next-line
    "k" #'previous-line))
#+end_src
* miscellaneous
#+begin_src elisp
;; C-h deletes character backwards
(define-key key-translation-map [?\C-h] [?\C-?])

(after! recentf
  (add-to-list 'recentf-exclude "^/media/500GB/sort/"))

(setq-default
 ;; russian layout on C-\
 default-input-method "russian-computer"

 ;; start scrolling when this far from the top or bottom of the buffer
 scroll-margin 15)
#+end_src

** Debug icons in modeline, find out their names. :noexport:
#+begin_src elisp :tangle no
(defadvice! +debug-modeline-format-icon (icon-set icon label &optional face &rest args)
  :override +modeline-format-icon
  (propertize (format "X %s" label) 'face face))
#+end_src
* buffers
#+begin_src elisp :tangle packages.el :exports none
(package! bufler :pin "b96822d2132fda6bd1dd86f017d7e76e3b990c82")
#+end_src

#+begin_src elisp
(use-package! bufler
  :init
  (set-popup-rule! "^\\*Bufler\\*$" :ignore t)

  :config
  (after! exwm
    (exwm-input-set-key (kbd "s-b") #'bufler-switch-buffer))

  (after! evil-collection
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "C-k") 'bufler-list-buffer-kill
      "r" 'bufler
      (kbd "RET") 'bufler-list-buffer-switch))

  :custom
  (bufler-groups
   (bufler-defgroups
     (group (mode-match "Telega" (rx bos "telega-chat")))
     (group
      (group-and "X11" (mode-match "exwm-mode" (rx bos "exwm-mode")))
      (group-and "WWW"
       (lambda (b) (string= "qutebrowser" (buffer-local-value 'exwm-class-name b)))))
     (group (auto-project))
     (auto-directory))))
#+end_src
* org mode
#+begin_src elisp :tangle packages.el
(package! org-modern-indent
    :recipe (:host github :repo "jdtsmith/org-modern-indent")
    :pin "9973bd3b91e4733a3edd1fca232208c837c05473")
(package! corg
  :recipe (:host github :repo "isamert/corg.el")
  :pin "79af293aa95936274d7b3a6ba13d4b66a3a6ee76")
(package! org-projectile :pin "bf1c30b750020ab8dd634dd66b2c7b76c56286c5")
(package! org-tidy :pin "0bea3a2ceaa999e0ad195ba525c5c1dcf5fba43b")
#+end_src
#+begin_src scheme :noweb-ref guix-pkg
"font-iosevka-curly" ; for org-modern bullets
"emacs-ob-cfg"
#+end_src
#+begin_src elisp
(setq
 org-directory (expand-file-name "~/Sync/org/")
 org-attach-id-dir ".attach/"
 org-refile-targets `((nil :maxlevel . 3)
                      (,(expand-file-name "bookmarks.org" org-directory) :level . 1)
                      (org-agenda-files :maxlevel . 3))

 org-src-window-setup 'current-window
 org-fold-catch-invisible-edits 'show-and-error)

(use-package! org-checklist)
(use-package! org-projectile
  :config
  (setq org-project-capture-default-backend
        (make-instance 'org-project-capture-projectile-backend))
  (org-project-capture-per-project))

(use-package! corg
  :hook (org-mode . corg-setup))

(use-package! org-tidy
  :disabled
  :hook (org-mode . org-tidy-mode))

(use-package! org-contacts
  :custom
  (org-contacts-files (list (expand-file-name "contacts.org" org-directory))))

(use-package! org-modern-indent
  :hook (org-mode . org-modern-indent-mode))

(after! org-download
  (setq org-download-screenshot-method
        "flameshot gui --raw > %s"))

(load! "org-defuns")
#+end_src
** capture
*** COMMENT qutebrowser userscript
#+begin_src python :tangle ~/.local/share/qutebrowser/userscripts/orgprotocol :shebang #!/usr/bin/env python3
import os
from urllib.parse import quote
os.execlp('xdg-open', 'xdg-open',
          'org-protocol://capture?template=b&url={url}&title={title}&body={body}'.format(
              url   = quote(os.environ.get('QUTE_URL', '')),
              title = quote(os.environ.get('QUTE_TITLE', '')),
              body  = quote(os.environ.get('QUTE_SELECTED_TEXT', ''))))
#+end_src
*** template
#+begin_src elisp
(pushnew! org-capture-templates
          '("b" "Bookmark URL" entry
            (file+headline +org-capture-todo-file "Inbox")
            "* %?%a\n%i" :prepend t))
#+end_src
** agenda
#+begin_src elisp :tangle packages.el :exports none
(package! german-holidays :pin "a8462dffccaf2b665f2032e646b5370e993a386a")
#+end_src

#+begin_src elisp
(use-package! german-holidays
  :custom
  (calendar-holidays holiday-german-BE-holidays))

(setq
 org-agenda-files
 (-concat
  (org-project-capture-todo-files)
  (-map (lambda (el) (expand-file-name el org-directory))
        '("main.org"
          "tickler.org"))))
#+end_src

** roam
#+begin_src elisp
(after! org-roam
  (setq org-roam-db-node-include-function
        (lambda ()
          (not (member "ATTACH" (org-get-tags))))))
#+end_src
** elasticsearch :noexport:
#+begin_src elisp :tangle no
(package! es-mode :pin "e82465fd785688bb58918ea62ca4de06a2a23a1e")
#+end_src

#+begin_src elisp :tangle no
(use-package! es-mode
  :commands (org-babel-execute:es)

  :config
  (appendq!
   +org-babel-mode-alist '((es . elasticsearch))))
#+end_src
* programming
** vcs
#+begin_src elisp :tangle packages.el
(package! magit-todos :disable t) ; too slow
#+end_src

#+begin_src elisp
(after! magit
  (let ((sarg-repos-dir (expand-file-name "~/devel/")))
    (setq magit-repository-directories `((,sarg-repos-dir . 2))
          magit-clone-default-directory (concat sarg-repos-dir "ext/"))))

(after! browse-at-remote
  (setq browse-at-remote-prefer-symbolic nil))
#+end_src
** just
#+begin_src scheme :noweb-ref guix-pkg
"just"
#+end_src
#+begin_src cfg :dest ".justfile"
default:
    @just -f {{justfile()}} --list

mod? guix '~/devel/ext/guix/Justfile'
mod? dotfiles '~/devel/dotfiles/guix/Justfile'
#+end_src

#+RESULTS[78a391beff7a3e9b4427a8b6d2e964b55256832a]:
#+begin_src text :noweb-ref guix-file
(".justfile"
,(mixed-text-file
  "cfg-file"
"default:\n"
"    @just -f {{justfile()}} --list\n"
"\n"
"mod? guix '~/devel/ext/guix/Justfile'\n"
"mod? dotfiles '~/devel/dotfiles/guix/Justfile'"))
#+end_src

#+begin_src elisp :tangle packages.el
(package! just-mode :pin "4c0df4cc4b8798f1a7e99fb78b79c4bf7eec12c1")
(package! justl :recipe (:host github :repo "psibi/justl.el")
  :pin "1554e9e8db0c9653a924a10e87931082d8eafd9b")
#+end_src
#+begin_src elisp
(use-package! just-mode)
(use-package! justl)
#+end_src

** git
#+begin_src scheme :noweb-ref guix-pkg
"git" "git:send-email" "git-crypt" "perl" "git-credential-oauth"
#+end_src
#+begin_src cfg :dest ".gitconfig"
[user]
    name = 🐜(global 'name)🐜
    email = 🐜(global 'email)🐜
    signingKey = 🐜(global 'gpgKey)🐜

[commit]
    gpgSign = true

[push]
    default = simple

[sendemail]
    smtpServer = 🐜(pkg "msmtp")🐜/bin/msmtp

[credential]
    helper = cache --timeout 21600  # six hours
    helper = oauth
#+end_src

#+RESULTS[4111a2a001d67d80cd9ccc7fc9bdf8f5117e4679]:
#+begin_src text :noweb-ref guix-file
(".gitconfig"
,(mixed-text-file
  "cfg-file"
"[user]\n"
"    name = "(global 'name)"\n"
"    email = "(global 'email)"\n"
"    signingKey = "(global 'gpgKey)"\n"
"\n"
"[commit]\n"
"    gpgSign = true\n"
"\n"
"[push]\n"
"    default = simple\n"
"\n"
"[sendemail]\n"
"    smtpServer = "(pkg "msmtp")"/bin/msmtp\n"
"\n"
"[credential]\n"
"    helper = cache --timeout 21600  # six hours\n"
"    helper = oauth"))
#+end_src

#+begin_src elisp
(after! magit
  ;; agit flow
  (transient-define-suffix magit-push-current-agit (source target args)
    :if (lambda () (when-let* ((branch (magit-get-current-branch))
                               (remote (magit-get "branch" branch "remote"))
                               (agit (magit-get "remote" remote "agit")))
                     (string= "true" agit)))
    :description (lambda () (concat (magit-push--upstream-description) " (agit)"))
    (interactive
     (let ((source (or (magit-get-current-branch)
                       (user-error "No branch is checked out"))))
       (list source
             (magit-get-upstream-branch source)
             (magit-push-arguments))))

    (let* ((origin (magit-get "branch" source "remote"))
           (desc (magit-get "branch" source "description"))
           (desc (and desc (split-string desc "\n" 't (rx space)))))

      (unless (string= "true" (magit-get "remote" origin "agit"))
        (user-error "AGit not enabled for remote %s" origin))

      (magit-push-refspecs
       origin
       (concat source ":refs/for/" (cdr (magit-split-branch-name target)) "/" source)
       `(,@args
         "-o" "force-push=true"
         ,@(if desc (list "-o" (concat "title=" (car desc))) '())
         ,@(if (and desc (cdr desc)) (list "-o" (concat "description=" (string-join (cdr desc) "<br>")) '()))))))

  (transient-insert-suffix 'magit-push
    '(1 0) (list "a" #'magit-push-current-agit)))
#+end_src
** guix development
#+begin_src scheme :noweb-ref guix-pkg
"emacs-debbugs" "gnu-standards" "mumi-with-jaro" "emacs-fj"
#+end_src
#+begin_src elisp :tangle packages.el
(package! fj :built-in t)
(package! guix :built-in t)
#+end_src
#+begin_src elisp
(after! debbugs
  (setq debbugs-gnu-default-packages '("guix" "guix-patches"))
  (set-popup-rule! "^\\*Guix-Patches Bugs\\*$" :ignore t)
  (set-popup-rule! "^\\*Summary nndoc" :ignore t)
  (set-popup-rule! "^\\*Article" :ignore t))

(use-package! fj
  :commands fj-list-items fj-list-pulls
  :config
  (setq! fj-host "https://codeberg.org"
         fj-user "sarg"
         fj-token-use-auth-source nil
         fj-token (auth-source-pass-get 'secret "Api/codeberg.org/fj.el")))

(use-package! guix
  :config
  (setq! guix-repl-use-server nil
         guix-current-profile "~/.guix-home/profile"
         guix-load-path (mapcar #'expand-file-name
                                '("~/devel/dotfiles/guix/personal" "~/devel/ext/nonguix"))))
#+end_src
* tramp
#+begin_src elisp
(after! tramp
  (pushnew! tramp-remote-path 'tramp-own-remote-path))
#+end_src
* book reading
** zathura
#+begin_src scheme :noweb-ref guix-pkg
"zathura" "zathura-pdf-mupdf" "zathura-djvu" "zathura-cb"
#+end_src
#+begin_src elisp :tangle packages.el
(package! zathura-sync-theme
  :recipe (:host github :repo "amolv06/zathura-sync-theme")
  :pin "7f1dece30d9f03e37d12ebfb3af6b1d663e4c8dd")
#+end_src
#+begin_src elisp
(use-package! zathura-sync-theme
  :config
  (zathura-sync-theme-mode))
#+end_src
#+begin_src cfg :dest ".config/zathura/zathurarc"
set guioptions ""
set statusbar-basename true
include theme
#+end_src

#+RESULTS[2a74b1f7dc93b5fcbd734c5323105bce51dab21d]:
#+begin_src text :noweb-ref guix-file
(".config/zathura/zathurarc"
,(mixed-text-file
  "cfg-file"
"set guioptions \"\"\n"
"set statusbar-basename true\n"
"include theme"))
#+end_src

#+begin_src elisp :tangle packages.el
(package! calibredb :built-in t)
(package! nov :built-in t)
#+end_src
** nov.el
#+begin_src scheme :noweb-ref guix-pkg
"emacs-nov-el"
#+end_src
#+begin_src elisp :tangle no
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)

  :custom
  (nov-variable-pitch nil)
  (nov-text-width t))
#+end_src
** calibre
#+begin_src scheme :noweb-ref guix-pkg
"emacs-calibredb" "sqlite" "calibre"
#+end_src
#+begin_src elisp
(use-package! calibredb
  :commands calibredb

  :custom
  (calibredb-root-dir (alist-get 'library_path (json-read-file "~/.config/calibre/global.py.json")))
  (calibredb-preferred-format 'epub) ;; just open it, don't ask

  ;; hide extra columns
  (calibredb-date-width 0)
  (calibredb-format-width 0)
  (calibredb-title-width 80)
  (calibredb-tag-width -1)
  (calibredb-comment-width 0)

  :config
  (defalias 'calibredb-open-with-default-tool #'find-file))
#+end_src

* browsing
** qutebrowser
#+begin_src elisp :tangle packages.el
(package! qutebrowser :recipe
  (:host github :repo "lrustand/qutebrowser.el" :files (:defaults "*.py"))
  :pin "137f066dac06e1abdbf3285561ce2e1f3059b491")
#+end_src
#+begin_src scheme :noweb-ref guix-pkg
"qutebrowser"
#+END_src
#+begin_src scheme :noweb-reg guix-env-var
("BROWSER" . "qutebrowser")
#+end_src
#+begin_src cfg :chmod "u+x" :dest ".local/share/dark-mode.d/qutebrowser"
#!🐜(pkg "bash-minimal")🐜/bin/sh
cat <<EOF > ~/.config/qutebrowser/darkmode.py
c.colors.webpage.darkmode.enabled = True
EOF

pgrep -f QtWebEngineProcess && qutebrowser ':config-source darkmode.py'
#+end_src

#+RESULTS[763eb98491bedcbabff19383e8d79504ad1d6d2f]:
#+begin_src text :noweb-ref guix-file
(".local/share/dark-mode.d/qutebrowser"
,(chmod-computed-file (mixed-text-file
  "cfg-file"
"#!"(pkg "bash-minimal")"/bin/sh\n"
"cat <<EOF > ~/.config/qutebrowser/darkmode.py\n"
"c.colors.webpage.darkmode.enabled = True\n"
"EOF\n"
"\n"
"pgrep -f QtWebEngineProcess && qutebrowser ':config-source darkmode.py'") #o744))
#+end_src

#+begin_src cfg :chmod "u+x" :dest ".local/share/light-mode.d/qutebrowser"
#!🐜(pkg "bash-minimal")🐜/bin/sh
cat <<EOF > ~/.config/qutebrowser/darkmode.py
c.colors.webpage.darkmode.enabled = False
EOF

pgrep -f QtWebEngineProcess && qutebrowser ':config-source darkmode.py'
#+end_src

#+RESULTS[802f180103c2bbf76b5b27e7fd9cdbc5e13f177d]:
#+begin_src text :noweb-ref guix-file
(".local/share/light-mode.d/qutebrowser"
,(chmod-computed-file (mixed-text-file
  "cfg-file"
"#!"(pkg "bash-minimal")"/bin/sh\n"
"cat <<EOF > ~/.config/qutebrowser/darkmode.py\n"
"c.colors.webpage.darkmode.enabled = False\n"
"EOF\n"
"\n"
"pgrep -f QtWebEngineProcess && qutebrowser ':config-source darkmode.py'") #o744))
#+end_src

#+begin_src scheme :noweb-ref guix-file
(".config/qutebrowser/urllog.py" ,(local-file "../qutebrowser/.config/qutebrowser/urllog.py"))
(".config/qutebrowser/config.py" ,(local-file "../qutebrowser/.config/qutebrowser/config.py"))
(".local/share/qutebrowser" ,(symlink-to "/storage/data/qutebrowser"))
#+end_src
#+begin_src elisp
(defun browse-url-qute-private (url &rest _)
  "Make qutebrowser open URL in private-browsing window."
  (interactive (browse-url-interactive-arg "URL: "))
  (let ((process-environment (browse-url-process-environment)))
    (start-process "qutebrowser-private" nil
           "qutebrowser" "--target" "private-window" url)))

(defun qutebrowser-bg-tabs ()
  (interactive)
  (qutebrowser-cmd-set "tabs.tabs_are_windows" "false" :temp)
  (setq-local browse-url-browser-function
              (lambda (url &optional new-window)
                (qutebrowser-cmd-open :bg url))))

(setq-default
 browse-url-browser-function 'browse-url-generic
 browse-url-generic-program "qutebrowser")

(def-modeline! :qutebrowser
               '("" evil-mode-line-tag "%b") `(""))

(set-modeline-hook! 'qutebrowser-exwm-mode-hook :qutebrowser)

(use-package! qutebrowser
  :hook ((exwm-init . global-qutebrowser-exwm-mode)
         (exwm-init . qutebrowser-evil-state-mode)
         (exwm-init . qutebrowser-theme-export-mode))
  :custom
  (qutebrowser-pass-username-function (lambda (e) (auth-source-pass-get "login" e)))
  (qutebrowser-launcher-backend #'qutebrowser-consult-launcher)

  :config
  (add-to-list 'qutebrowser-theme-export-face-mappings '(webpage.bg . default)))
#+end_src
** yeetube
#+begin_src elisp :tangle packages.el
(package! yeetube :built-in t)
#+end_src
#+begin_src scheme :noweb-ref guix-pkg
"emacs-yeetube"
#+END_src
#+begin_src elisp
(use-package! yeetube
  :commands yeetube-search
  :config
  (map! :map yeetube-mode-map :ni "RET" #'yeetube-play))
#+end_src
* shell
#+begin_src elisp :tangle packages.el
(package! eat :built-in t)
(package! detached :built-in t)
#+end_src

#+begin_src scheme :noweb-ref guix-pkg
"emacs-eat" "emacs-detached" "direnv" "atuin"
#+end_src

#+begin_src cfg :dest .config/atuin/config.toml
auto_sync = false
update_check = false
#+end_src

#+RESULTS[3781d8ff9f7ecf1434c2011ae337761989feca9d]:
#+begin_src text :noweb-ref guix-file
(".config/atuin/config.toml"
,(mixed-text-file
  "cfg-file"
"auto_sync = false\n"
"update_check = false"))
#+end_src

#+name: cfg-bash
#+begin_src cfg :wrap src text
[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && source "$EAT_SHELL_INTEGRATION_DIR/bash"
eval "$(direnv hook bash)"

source 🐜(pkg "blesh")🐜/share/blesh/ble.sh
eval "$(atuin init bash)"
#+end_src

#+RESULTS[f61c1c224a978c626c2e6d9a264aabfc6c5ded15]: cfg-bash
#+begin_src text
(mixed-text-file
  "cfg-file"
"[ -n \"$EAT_SHELL_INTEGRATION_DIR\" ] && source \"$EAT_SHELL_INTEGRATION_DIR/bash\"\n"
"eval \"$(direnv hook bash)\"\n"
"\n"
"source "(pkg "blesh")"/share/blesh/ble.sh\n"
"eval \"$(atuin init bash)\"")
#+end_src

#+begin_src scheme :noweb-ref guix-srv
(service home-bash-service-type)
(simple-service
 'extensions home-bash-service-type
 (home-bash-extension
  (aliases '(("g" . "just -g dotfiles")
             ("gu" . "just -g guix")))
  (bashrc (list <<cfg-bash()>>))))
#+end_src

#+begin_src elisp
; presumably speeds up I/O
; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44007
(setq process-adaptive-read-buffering nil)
(setq read-process-output-max (* 4 1024 1024))

(after! eshell
  (setq! eshell-prefer-lisp-functions 't)
  (set-eshell-alias!
   "doom" "$doom-core-dir/../bin/doom $@*"
   "guix" "*guix $@*")
  (add-to-list 'eshell-modules-list 'eshell-smart)
  (map! :map eshell-mode-map
        :ni "C-r" #'consult-history))

(use-package! eat
  :hook ((eshell-load . eat-eshell-mode)
         (eshell-load . eat-eshell-visual-command-mode)))

(use-package! detached
  :config
  (detached-init)
  :bind (;; Replace `async-shell-command' with `detached-shell-command'
         ([remap async-shell-command] . detached-shell-command)
         ;; Replace `compile' with `detached-compile'
         ([remap compile] . detached-compile)
         ([remap recompile] . detached-compile-recompile)
         ;; Replace built in completion of sessions with `consult'
         ([remap detached-open-session] . detached-consult-session))
  :custom ((detached-show-output-on-attach t)
           (detached-terminal-data-command system-type)))
#+end_src

* dired
#+begin_src elisp :tangle packages.el
(package! dired-du :built-in t)
(package! openwith :built-in t)
(package! sxiv :built-in t)
#+end_src

#+begin_src scheme :noweb-ref guix-pkg
"emacs-dired-hacks" "emacs-dired-du"
"emacs-openwith" "emacs-sxiv"
#+end_src

#+begin_src elisp
(after! dirvish
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$"))

  (add-to-list 'dirvish-hide-details 'dired)
  (setq! dirvish-quick-access-entries
         `(("h" "~/"                             "Home")
           ("c" ,(f-dirname doom-core-dir)       "Doom root")
           ("e" "~/devel/dotfiles/emacs/.doom.d" "Emacs config")
           ("d" "~/Downloads/"                   "Downloads")
           ("m" "/media/500GB/media"             "Media"))))

(use-package! sxiv
  :commands sxiv)
(use-package! dired-du
  :custom
  ;; human readable
  (dired-du-size-format 't))

(after! async
  (dired-async-mode 1))

(defun openwith-has-association (file)
  (-any? (lambda (oa) (string-match (car oa) file)) openwith-associations))

(use-package! openwith
  :hook (after-init . openwith-mode)
  :custom
  (openwith-associations
   '(("\\.\\(?:pdf\\|epub\\|djvu\\|mkv\\|webm\\|avi\\|mp4\\)\\'" "xdg-open" (file))))

  :config
  ;; Don't ask if file is too large when it'll be handled by openwith-mode.
  (advice-add 'abort-if-file-too-large :before-until
              (lambda (size op-type filename &rest args)
                (and (boundp 'openwith-mode) openwith-mode
                     (openwith-has-association filename)))))
#+end_src

* bindings
#+begin_src elisp
(map!
 "C-x b" #'bufler-switch-buffer

 (:map dired-mode-map
  :n (kbd "DEL") #'dired-up-directory
  :n "K" #'dired-do-kill-lines)

 (:map image-mode-map
  :n "q" #'kill-current-buffer)

 :leader
 "h" nil
 "," #'bufler-switch-buffer
 :desc "Music" "oM" #'=emms
 :desc "Dash" "om" #'dash-menu)
#+end_src
* llm
#+begin_src elisp :tangle packages.el
; TODO: remove custom pin once doom catches up
(package! gptel :pin "1a83e0e12c452664bfc24e46f137e3bdc546e0ae")
#+end_src
#+begin_src elisp
(after! gptel
  (setq gptel-model 'gemini-2.5-flash
        gptel-backend
        (gptel-make-gemini "Gemini"
          :key (lambda (&rest args)
                 (gptel-api-key-from-auth-source "google.com" "gemini"))
          :stream t)))
#+end_src
* COMMENT emacs screencast recording
#+begin_src elisp :tangle packages.el
(package! command-log-mode :pin "af600e6b4129c8115f464af576505ea8e789db27")
;(package! keycast)
;(package! camcorder) autoloads fail because of names.el usage. todo: debug
#+end_src

#+begin_src elisp
(use-package! command-log-mode
  :commands command-log-mode)
;; (use-package! camcorder
;;   :commands camcorder-mode
;;   :hook (camcorder-mode-hook . clm/command-log-clear))
#+end_src

#+begin_src scheme :noweb-ref guix-pkg
"recordmydesktop"
#+end_src
* experimental
** bookmark
#+begin_src scheme :noweb-ref guix-pkg
"emacs-bookmark-plus"
#+end_src
#+begin_src elisp :tangle packages.el
(package! bookmark+ :built-in t)
#+end_src
#+begin_src elisp
(setq bookmark-default-file "/storage/data/emacs/bookmarks")
(use-package! bookmark+)
#+end_src
** cyclekey
#+begin_src elisp :tangle packages.el
(package! cyclekey :recipe (:host github :repo "shankar2k/cyclekey")
  :pin "6f2b5863ab545a68775376825e5a4361a5413a62")
#+end_src
#+begin_src elisp
(use-package! cyclekey
  :bind ("M-o" . cyclekey-cycle)

  :config
  (cyclekey-add-language "German")
  (cyclekey-init))
#+end_src
** magic sqlite
#+begin_src elisp
; https://christiantietze.de/posts/2024/01/emacs-sqlite-mode-open-sqlite-files-automatically/
(use-package! sqlite-mode
  :config
  (defun ct/sqlite-view-file-magically ()
    "Runs `sqlite-mode-open-file' on the file name visited by the
current buffer, killing it."
    (require 'sqlite-mode)
    (let ((file-name buffer-file-name))
      (kill-current-buffer)
      (sqlite-mode-open-file file-name)))

  (add-to-list 'magic-mode-alist '("SQLite format 3\x00" . ct/sqlite-view-file-magically)))
#+end_src
** gpx-mode
#+begin_src scheme :noweb-ref guix-pkg
;; "emacs-gpx"
"emacs-osm"
#+end_src
#+begin_src elisp
(use-package! osm
  :commands osm

  :init
  (set-popup-rule! "^\\*osm" :ignore t)

  :config
  (defun gpx-show-map-osm (file track segment)
    (osm-gpx-show file)))

;; (use-package! gpx
;;   :config
;;   (setq gpx-show-map-function  #'gpx-show-map-osm))
#+end_src
** qute-dired
#+begin_src elisp
(defun qute/choose-file ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-file qute-filename
      (insert (s-join "\n" files)))
    (unbind-key "C-C C-c" 'dired-mode-map)
    (+dired/quit-all)))

(defun qute/dired-hook (&optional _)
  (when (s-starts-with? "/tmp/qutebrowser-fileselect" buffer-file-name)
    (setq qute-filename buffer-file-name)
    (kill-buffer)
    (dired "~/")
    (bind-key "C-c C-c" #'qute/choose-file 'dired-mode-map)))

(add-hook! 'server-visit-hook #'qute/dired-hook)
#+end_src
** COMMENT org-node
#+begin_src scheme :noweb-ref guix-pkg
"emacs-org-node"
#+end_src
#+begin_src elisp :tangle packages.el
(package! org-node :built-in t)
#+end_src
#+begin_src elisp
(use-package! org-node)
#+end_src
** COMMENT org-supertag
#+begin_src elisp :tangle packages.el
(package! org-supertag
  :recipe (:host github
           :repo "yibie/org-supertag"
           :files (:defaults (:exclude "*sim*"))))
#+end_src
#+begin_src elisp
(use-package! org-supertag
  :disabled
  :after org
  :config
  (org-supertag-setup))
#+end_src
** hnreader
#+begin_src elisp :tangle packages.el
(package! hnreader :pin "a56f67a99a855ca656da1c1985e09f44509e4bbb")
#+end_src
#+begin_src elisp
(use-package! hnreader
  :commands hnreader-news
  :config
  (org-link-set-parameters "eww" :follow 'eww-browse-url))
#+end_src

* TODO todo [8/13]
** DONE console font
** DONE mingetty with xorg autostart (under sarg), put `lock.sh` first in the .xsession
** DONE user syncthing
** DONE check if greetd is necessary
** TODO move away from org-contacts
Reqs:
- use [[https://datatracker.ietf.org/doc/html/rfc6350#section-5.4][ALTID]] for names in russian/english
- group KIND
- embed photo (=PHOTO:data:image/webp;base64,...=)
- nickname
- impp for telega/whatsapp
https://isamert.net/2021/04/21/managing-your-contacts-in-org-mode-and-syncing-them-to-your-phone-android-ios-whatever-.html

** DONE guix gc, but not that aggressive
=--gc-keep-derivations= and =--gc-keep-outputs= to =guix-daemon= params
** NO Fix hardcoded =Guix_image= root partition name
** DONE Fix =gnupg= symlink\\
=guix home= =update-symlinks= creates =~/.gnupg= before my symlink activation service runs
therefore gnupg private keys are not symlinked\\
Target state:
*** =~/.gnupg= is a symlink to =/storage/data/gnupg=
*** =gpg-agent.conf= and =gpg.conf= are managed by =guix home=
** DONE +duplicate env entries because of ~doom env~+ (just delete the file)
** TODO counsel-spotify pollutes namespace because of :reader in EIEIO objects (name, artist ...)
** TODO emacs keybindings revamp
- winner to be replaced with custom window management
- evil bindings in EMMS buffers (q to close, SPC to enter)
- repeat Super+<digit> to switch (saved) window configurations
** TODO how to make home services depend on online status?
** TODO set password in system-image
#+begin_src scheme :noweb-ref nil
;; (define user-pass
;;   (let ((user-pass-1 (begin
;;                        (format #t "Define user password: ")
;;                        (force-output)
;;                        (get-line (current-input-port))))
;;         (user-pass-2 (begin
;;                        (format #t "Repeat user password: ")
;;                        (force-output)
;;                        (get-line (current-input-port)))))

;;     (when (not (string=? user-pass-1 user-pass-2))
;;       (error "Passwords don't match"))

;;     user-pass-1))

;; (define user-account
;;   (user-account
;;    (inherit user)
;;    (password (crypt user-pass "$6$salt"))))
#+end_src
* COMMENT archive
** emacs-one-frame
#+begin_src sh :shebang #!/bin/bash
# https://taingram.org/2017/05/09/using-emacsclient-to-speed-up-editing/
# if no args open new frame
if [ $# -eq 0 ]; then
    emacsclient -c -n
    exit
fi

emacsclient -e "(frames-on-display-list \"$DISPLAY\")" &>/dev/null

if [ $? -eq 0 ]; then
    emacsclient -n "$*"
else
    emacsclient -c -n "$*"
fi
#+end_src
** openscad
#+begin_src elisp
(defun openscad-preview ()
  (interactive)
  (select-window (split-window-right))
  (start-process "openscad" nil "openscad" (buffer-file-name)))
#+end_src

** selfcontrol
#+begin_src elisp
(defun sarg/ad-selfcontrol-time-restriction (orig-fun &rest args)
  (if (or (= 0 (mod
                (calendar-day-of-week (calendar-current-date))
                6)) ; 0 and 6 - Sunday and Saturday
          (> (nth 2 (decode-time)) 18))
      (apply orig-fun args)
    (message "It's not the time yet!")))

(defun sarg/ad-selfcontrol-otp-confirm (proc &rest args)
  "Asks to enter random string as confirmation before executing PROC."
  (interactive)
  (let* ((pass (format "%06x%06x%06x"
                       (random (expt 16 6))
                       (random (expt 16 6))
                       (random (expt 16 6))))

         (input (read-string (format "Enter %s if you wish to proceed: " pass))))

    (if (string= input pass)
        (apply proc args))))

(after! elfeed
  (advice-add 'elfeed-update :around #'sarg/ad-selfcontrol-otp-confirm)
  (advice-add '=rss :around #'sarg/ad-selfcontrol-otp-confirm)
  (advice-add 'elfeed-update :around #'sarg/selfcontrol-time-restriction))

(after! telega
  (advice-add 'ivy-telega-chat-with :around #'sarg/ad-selfcontrol-otp-confirm))
#+end_src

** fate
#+begin_src elisp
(use-package! fate
  :disabled
  :load-path "~/devel/ext/fate"
  :config
  (setq fate:data-file "~/.events/win")

  (defun fate:buffer-string (buffer)
    "Return either path or name of BUFFER."
    (or (buffer-file-name buffer)
        (buffer-name buffer)))

  (defun fate:log-state (state)
    "Write STATE to the database file."
    (write-region state nil fate:data-file 'append :inhibit))

  (defun fate:state-string-base (left right)
    "Represent state using LEFT and RIGHT."
    (format "%s;win;%s;%s\n"
            (format-time-string "%s.%6N")
            (fate:escape left)
            (fate:escape right))))
#+end_src
* COMMENT Local variables
#+NAME: api
#+begin_src elisp
(add-hook 'after-save-hook (lambda () (org-babel-tangle nil nil "scheme")) 0 t)
(add-hook 'org-babel-pre-tangle-hook #'org-babel-execute-buffer 0 t)
#+end_src
# Local Variables:
# eval: (sarg/eval-org-src-block "api")
# End:
